import { Injectable, Logger } from '@nestjs/common';
import { EmbedBuilder, Guild } from 'discord.js';
import { PrismaService } from 'src/prisma.service';
import { ServerRepository } from 'src/repository/server';
import { validateServerAndRole } from 'src/utils/server-validation.util';

@Injectable()
export class ServerclearRoleService {
  private readonly logger = new Logger(ServerclearRoleService.name);

  constructor(
    private readonly prisma: PrismaService,
    private readonly serverRepository: ServerRepository,
  ) {}

  public onModuleInit() {
    this.logger.log('ServerclearRole initialized');
  }

  async ServerclearRoleSystem(interaction: any) {
    const roleCheck = 'admin'; // Required role for this command
    const validationError = await validateServerAndRole(
      interaction,
      roleCheck,
      this.serverRepository,
    );
    if (validationError) {
      return validationError; // Reply has already been handled
    }

    try {
      const guild: Guild = interaction.guild;

      if (!guild) {
        return interaction.editReply({
          content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ',
        });
      }

      // ‡∏£‡∏∞‡∏ö‡∏∏ Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô (‡∏£‡∏ß‡∏° @everyone role)
      const excludeRoles = ['‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡πÅ‡∏ó‡πà‡∏ô‡∏Ç‡∏≠‡∏û‡∏£', '@everyone'];
      const roles = guild.roles.cache;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Role ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (roles.size === 0) {
        return interaction.editReply({
          embeds: [
            new EmbedBuilder()
              .setTitle('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Role ‡πÉ‡∏´‡πâ‡∏•‡∏ö')
              .setDescription('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ.')
              .setColor(0xff0000),
          ],
        });
      }

      // ‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô Role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      for (const [roleId, role] of roles) {
        // ‡∏Ç‡πâ‡∏≤‡∏° @everyone role ‡πÅ‡∏•‡∏∞ role ‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô
        if (role.name === '@everyone' || excludeRoles.includes(role.name)) {
          this.logger.log(`Skipped deleting role: ${role.name} (${roleId})`);
          continue; // ‡∏Ç‡πâ‡∏≤‡∏° Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ role ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (role.managed || role.id === guild.id) {
          this.logger.log(`Skipped deleting managed/system role: ${role.name} (${roleId})`);
          continue;
        }

        // ‡∏•‡∏ö Role
        try {
          await role.delete(`Deleted by ${interaction.user.tag}`);
          this.logger.log(`Deleted role: ${role.name} (${roleId})`);
        } catch (deleteError) {
          this.logger.error(
            `‚ùå Failed to delete role: ${role.name} (${roleId}). Error: ${deleteError.message}`,
          );
        }
      }

      // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setTitle('‚úÖ ‡∏•‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
            .setDescription(
              `üéâ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô)\n` +
                `- ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: "‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡πÅ‡∏ó‡πà‡∏ô‡∏Ç‡∏≠‡∏û‡∏£", "@everyone"`,
            )
            .setColor(0x00ff00),
        ],
      });
    } catch (error) {
      this.logger.error(`Error deleting roles: ${error.message}`);
      return interaction.editReply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      });
    }
  }
}
