import { Injectable, Logger } from '@nestjs/common';
import { Context, SlashCommand, SlashCommandContext } from 'necord';
import { DonationService } from './donation.service';
import { PermissionFlagsBits } from 'discord.js';

@Injectable()
export class DonationCommands {
  private readonly logger = new Logger(DonationCommands.name);

  constructor(private readonly donationService: DonationService) { }

  @SlashCommand({
    name: 'donate',
    description: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Donation',
    defaultMemberPermissions: PermissionFlagsBits.SendMessages,
  })
  async handleDonation(@Context() [interaction]: SlashCommandContext) {
    await interaction.deferReply({ ephemeral: true });

    try {
      if (!interaction.channel) {
        throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ');
      }

      const embed = await this.donationService.generateDonationEmbed();
      const message = await interaction.channel.send({ embeds: [embed] });

      const gifts = ['üéâ', 'üéà', 'üíé', 'üöÄ'];

      for (const emoji of gifts) {
        try {
          await message.react(emoji);
        } catch (error) {
          this.logger.warn(`‚ùó ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤: ${emoji} - ${error.message}`);
        }
      }

      await interaction.editReply({ content: 'üì¢ ‡∏£‡∏∞‡∏ö‡∏ö Donation ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!' });
    } catch (error) {
      this.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Donation:', error);
      await interaction.editReply({
        content:
          '‚ùå **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Donation ‡πÑ‡∏î‡πâ**\n' +
          '‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      });
    }
  }
}
