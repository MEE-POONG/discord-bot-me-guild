import { Injectable, Logger } from '@nestjs/common';
import { UserDB } from '@prisma/client';
import axios from 'axios';
import {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  TextChannel,
  ButtonInteraction,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  GuildMember,
  ModalSubmitInteraction,
} from 'discord.js';
import { Button, ButtonContext, Context, Modal, ModalContext } from 'necord';
import { PrismaService } from 'src/prisma.service';
import { ServerRepository } from 'src/repository/server';
import { isValidEmail } from 'src/utils/validEmail';

@Injectable()
export class FormRegisterService {
  private readonly logger = new Logger(FormRegisterService.name);
  constructor(
    private readonly prisma: PrismaService,
    private readonly serverRepository: ServerRepository,
  ) {}
  public onModuleInit() {
    this.logger.log('FormRegisterService initialized');
  }

  async createRegistrationMessage(interaction: any) {
    this.logger.debug(
      `[createRegistrationMessage] Starting registration message creation for guild: ${interaction.guildId}`,
    );
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const server = await this.prisma.serverDB.findUnique({
        where: { serverId: interaction.guildId },
      });
      this.logger.debug(
        `[createRegistrationMessage] Found server data: ${JSON.stringify(server)}`,
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ registerChannel ‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (server?.registerChannel) {
        this.logger.debug(
          `[createRegistrationMessage] Found existing register channel: ${server.registerChannel}`,
        );
        const oldChannel = await interaction.guild?.channels
          .fetch(server.registerChannel)
          .catch(() => null);
        if (oldChannel) {
          this.logger.debug(
            `[createRegistrationMessage] Attempting to delete old channel: ${oldChannel.id}`,
          );
          await oldChannel.delete().catch((e) => {
            this.logger.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ: ${e.message}`);
          });
        }
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏á registerChannel
      this.logger.debug(
        `[createRegistrationMessage] Updating server with new register channel: ${interaction.channelId}`,
      );
      await this.prisma.serverDB.update({
        where: { serverId: interaction.guildId },
        data: { registerChannel: interaction.channelId },
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      const embeds = new EmbedBuilder()
        .setTitle('‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢')
        .setDescription(
          '- ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"',
        )
        .setColor(16760137)
        .setFooter({
          text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö',
          iconURL: 'https://cdn-icons-png.flaticon.com/512/4104/4104800.png',
        })
        .setImage(
          'https://media.discordapp.net/attachments/1222826027445653536/1222826136359276595/registerguild.webp?ex=6617a095&is=66052b95&hm=17dfd3921b25470b1e99016eb9f89dd68fb1ada3481867d145c8acf81e25cec6&=&format=webp&width=839&height=400',
        )
        .setThumbnail(
          'https://cdn-icons-png.flaticon.com/512/6521/6521996.png',
        );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      const actionRow = new ActionRowBuilder<ButtonBuilder>().setComponents(
        new ButtonBuilder()
          .setCustomId('register-button')
          .setEmoji('üìù')
          .setLabel('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢')
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId('register-guild')
          .setEmoji('üìù')
          .setLabel('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏•‡∏•‡πå')
          .setStyle(ButtonStyle.Primary),
      );

      // ‡∏™‡πà‡∏á Embed ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
      const channel = interaction.channel as TextChannel;
      return channel.send({
        embeds: [embeds],
        components: [actionRow],
      });
    } catch (error) {
      this.logger.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', error);
      return interaction.reply({
        content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
        ephemeral: true,
      });
    }
  }

  @Button('register-button')
  async registerModal(@Context() [interaction]: ButtonContext) {
    this.logger.debug(
      `[registerModal] Button clicked by user: ${interaction.user.id}`,
    );
    const checkUser = interaction.member as GuildMember;

    const userDB = await this.prisma.userDB.findFirst({
      where: {
        OR: [{ discord_id: interaction.user.id }],
      },
    });
    this.logger.debug(
      `[registerModal] User DB check result: ${JSON.stringify(userDB)}`,
    );

    try {
      this.logger.debug(`[registerModalSubmit] Creating wallet account`);
      await axios({
        method: 'POST',
        url: 'https://me-coins-wallet.me-prompt-technology.com/api/auth/register',
          data: {
            email: interaction.user.username.toString().toLowerCase() + '@discord.com',
            username: interaction.user.username.toString().toLowerCase(),
            avatar: interaction.user.displayAvatarURL(),
            discordId: interaction.user.id,
            password: 'password123',
          },
      });
      this.logger.debug(
        `[registerModalSubmit] Wallet account created successfully`,{
          email: interaction.user.username.toString().toLowerCase() + '@discord.com',
          username: interaction.user.username.toString().toLowerCase(),
          avatar: interaction.user.displayAvatarURL(),
          discordId: interaction.user.id,
          password: 'password123',
        }
      );
    } catch (error) {
      this.logger.error(
        '[registerModalSubmit] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏á‡πÑ‡∏î‡πâ',
        error.response?.data || error,
      );
    }
    if (userDB) {
      this.logger.debug(`[registerModal] Existing user found, checking roles`);
      const server = await this.serverRepository.getServerById(
        interaction.guildId,
      );
      const member = interaction.member as GuildMember;

      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ Role ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasRoles = member.roles.cache.size > 1;
      this.logger.debug(`[registerModal] User has roles: ${hasRoles}`);

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Role ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏ö Role ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡πÉ‡∏´‡πâ
      if (!hasRoles) {
        this.logger.debug(`[registerModal] Adding roles to user`);
        if (server.visitorRoleId) {
          await member.roles.remove(server.visitorRoleId).catch((e) => {
            this.logger.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Visitor Role: ${e.message}`);
          });
        }

        if (server.adventurerRoleId) {
          await member.roles.add(server.adventurerRoleId).catch((e) => {
            this.logger.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Adventurer Role: ${e.message}`);
          });
        }
      }

      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      return this.showProfile(interaction, userDB);
    }

    try {
      this.logger.debug(
        `[registerModal] Creating registration modal for new user`,
      );
      const createTextInput = (
        customId: string,
        label: string,
        placeholder: string,
        minLength: number,
        maxLength: number,
      ) =>
        new TextInputBuilder()
          .setCustomId(customId)
          .setLabel(label)
          .setPlaceholder(placeholder)
          .setMinLength(minLength)
          .setMaxLength(maxLength)
          .setRequired(true)
          .setStyle(TextInputStyle.Short);

      const modal = new ModalBuilder()
        .setCustomId('register-modal')
        .setTitle('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢')
        .setComponents(
          new ActionRowBuilder<TextInputBuilder>().setComponents(
            createTextInput('firstname', '‡∏ä‡∏∑‡πà‡∏≠', '‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', 2, 50),
          ),
          new ActionRowBuilder<TextInputBuilder>().setComponents(
            createTextInput(
              'lastname',
              '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
              '‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
              2,
              50,
            ),
          ),
          new ActionRowBuilder<TextInputBuilder>().setComponents(
            createTextInput('email', '‡∏≠‡∏µ‡πÄ‡∏°‡∏•', '‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', 5, 100),
          ),
          new ActionRowBuilder<TextInputBuilder>().setComponents(
            createTextInput(
              'nickname',
              '‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á',
              '‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
              1,
              20,
            ),
          ),
          new ActionRowBuilder<TextInputBuilder>().setComponents(
            createTextInput(
              'birthday',
              '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡∏Ñ.‡∏®. ‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏ß‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 1997-03-27)',
              '‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD',
              10,
              10,
            ),
          ),
        );

      await interaction.showModal(modal);
      this.logger.debug(`[registerModal] Modal displayed successfully`);
    } catch (error) {
      this.logger.error(
        '[registerModal] Error displaying registration modal:',
        error,
      );
      return interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ',
        ephemeral: true,
      });
    }
  }

  @Modal('register-modal')
  async registerModalSubmit(@Context() [interaction]: ModalContext) {
    this.logger.debug(
      `[registerModalSubmit] Modal submitted by user: ${interaction.user.id}`,
    );
    let nickname = interaction.fields.getTextInputValue('nickname');
    let firstname = interaction.fields.getTextInputValue('firstname');
    let lastname = interaction.fields.getTextInputValue('lastname');
    let email = interaction.fields.getTextInputValue('email');
    let member = interaction.member as GuildMember;
    let birthdayInput = interaction.fields.getTextInputValue('birthday');
    let birthday: Date;

    this.logger.debug(
      `[registerModalSubmit] Form data received - Name: ${firstname} ${lastname}, Email: ${email}, Nickname: ${nickname}`,
    );

    try {
      birthday = new Date(birthdayInput);
      if (isNaN(birthday.getTime())) {
        this.logger.warn(
          `[registerModalSubmit] Invalid birthday format: ${birthdayInput}`,
        );
        throw new Error('Invalid date');
      }
      this.logger.debug(
        `[registerModalSubmit] Birthday parsed successfully: ${birthday}`,
      );
    } catch {
      return interaction.reply({
        content:
          '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡πÄ‡∏ä‡πà‡∏ô 2008-03-27)',
        ephemeral: true,
      });
    }

    if (!isValidEmail(email)) {
      this.logger.warn(`[registerModalSubmit] Invalid email format: ${email}`);
      return interaction.reply({
        content: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        ephemeral: true,
      });
    }

    try {
      this.logger.debug(`[registerModalSubmit] Checking for existing user`);
      const existingUser = await this.prisma.userDB.findFirst({
        where: {
          OR: [
            {
              AND: [{ firstname: firstname }, { lastname: lastname }],
            },
            { email: email },
            { nickname: nickname },
          ],
        },
      });

      if (existingUser) {
        this.logger.warn(
          `[registerModalSubmit] Found existing user: ${JSON.stringify(existingUser)}`,
        );
        let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:';

        if (
          existingUser.firstname === firstname &&
          existingUser.lastname === lastname
        ) {
          errorMessage += '\n- ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß';
        }

        if (existingUser.email === email) {
          errorMessage += '\n- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß';
        }

        if (existingUser.nickname === nickname) {
          errorMessage += '\n- ‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß';
        }

        return interaction.reply({
          content: errorMessage,
          ephemeral: true,
        });
      }

      this.logger.debug(`[registerModalSubmit] Creating new user record`);
      const now = new Date();
      const schema = {
        discord_id: interaction.user.id,
        email: email,
        nickname: nickname,
        birthday: birthday,
        firstname: firstname,
        lastname: lastname,
        createdAt: now,
        createdBy: 'system',
        updatedAt: now,
        updatedBy: 'system',
        deleteBy: '',
      };

      const data = await this.prisma.userDB.create({
        data: schema,
      });
      this.logger.debug(
        `[registerModalSubmit] User created successfully: ${JSON.stringify(data)}`,
      );

      const server = await this.serverRepository.getServerById(
        interaction.guildId,
      );
      this.logger.debug(`[registerModalSubmit] Updating user roles`);
      this.showProfile(interaction, data);
      if (server.visitorRoleId) {
        await member.roles.remove(server.visitorRoleId).catch((e) => {
          this.logger.warn(
            `[registerModalSubmit] Failed to remove visitor role: ${e.message}`,
          );
        });
      }

      if (server.adventurerRoleId) {
        await member.roles.add(server.adventurerRoleId).catch((e) => {
          this.logger.warn(
            `[registerModalSubmit] Failed to add adventurer role: ${e.message}`,
          );
        });
      }
    } catch (err) {
      this.logger.error(
        '[registerModalSubmit] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
        err,
      );
      return interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
        ephemeral: true,
      });
    }
  }

  async showProfile(
    interaction: ButtonInteraction | ModalSubmitInteraction,
    profile: UserDB,
  ) {
    this.logger.debug(
      `[showProfile] Showing profile for user: ${interaction.user.id}`,
    );
    try {
      const formattedBirthday = profile.birthday
        ? new Date(profile.birthday).toLocaleDateString('en-GB', {
            weekday: 'short',
            day: '2-digit',
            month: 'short',
            year: 'numeric',
            timeZone: 'Asia/Bangkok',
          })
        : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      this.logger.debug(
        `[showProfile] Formatted birthday: ${formattedBirthday}`,
      );

      const embeds = new EmbedBuilder()
        .setAuthor({
          name: `${interaction.guild?.name} | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢`,
          iconURL: interaction.guild?.iconURL() ?? undefined,
        })
        .setFields(
          {
            name: '‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
            value: `${profile.firstname} ${profile.lastname}`,
            inline: true,
          },
          {
            name: '‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á',
            value: `${profile.nickname}`,
            inline: true,
          },
          {
            name: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î',
            value: `${formattedBirthday}`,
            inline: true,
          },
          {
            name: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
            value: `${profile.email}`,
            inline: true,
          },
          {
            name: '‡∏•‡∏¥‡∏á‡πå‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏á',
            value: `https://me-coins-wallet.me-prompt-technology.com`,
          },
          {
            name: 'username',
            value: interaction.user.username,
            inline: true,
          },
          {
            name: 'password',
            value: 'password123',
            inline: true,
          },
        )
        .setThumbnail(interaction.user.displayAvatarURL())
        .setColor('#a0ff71');

      this.logger.debug(`[showProfile] Sending profile embed`);
      interaction.reply({
        embeds: [embeds],
        ephemeral: true,
      });

      setTimeout(async () => {
        try {
          this.logger.debug(
            `[showProfile] Attempting to delete profile message`,
          );
          await interaction.deleteReply();
          this.logger.debug(
            `[showProfile] Profile message deleted successfully`,
          );
        } catch (e) {
          this.logger.warn(`[showProfile] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: ${e.message}`);
        }
      }, 100000);
    } catch (error) {
      this.logger.error('[showProfile] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ', error);
      interaction.reply({
        content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
        ephemeral: true,
      });
    }
  }
}
