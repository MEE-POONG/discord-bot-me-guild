import { StageChannelService } from '@/stage-channel/stage-channel.service';
import { Injectable, Logger } from '@nestjs/common';
import {
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  StringSelectMenuInteraction,
  TextChannel,
  ButtonBuilder,
  ButtonStyle,
  CacheType,
  ChannelType,
  GuildMember,
  CommandInteraction,
} from 'discord.js';
import { Button, ButtonContext, Context, SlashCommandContext, StringSelect, StringSelectContext } from 'necord';
import { PrismaService } from 'src/prisma.service';
import { ServerRepository } from 'src/repository/server';
import { validateServerAndRole } from 'src/utils/server-validation.util';

@Injectable()
export class ServerSetRoomService {
  private readonly logger = new Logger(ServerSetRoomService.name);
  private roomName: string;

  constructor(
    private readonly prisma: PrismaService,
    private readonly serverRepository: ServerRepository,
    private readonly stageChannelService: StageChannelService,
  ) { }

  public onModuleInit() {
    this.logger.log('ServerSetRoomService initialized');
  }

  async ServerSetRoomSystem([interaction]: SlashCommandContext) {
    this.logger.debug('ServerSetRoomSystem called');
    // await interaction.deferReply({ ephemeral: true });

    const validationError = await validateServerAndRole(
      interaction,
      'owner',
      this.serverRepository,
    );
    if (validationError) {
      this.logger.warn('Validation error:', validationError.message);
      return validationError;
    }

    const server = await this.serverRepository.getServerById(interaction.guildId);
    if (!server) {
      this.logger.warn('Server not found for guildId:', interaction.guildId);
      return this.replyError(interaction, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!');
    }

    this.logger.debug('Server found:', server);

    const roomSelectionRow = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(
      new StringSelectMenuBuilder()
        .setCustomId('SELECT_MENU_ROOM_TYPE')
        .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£')
        .addOptions([
          {
            label: 'Welcome Room',
            value: 'welcome',
            description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Welcome',
          },
          {
            label: 'News Room',
            value: 'news',
            description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á News',
          },
            {
              label: 'Register Room',
              value: 'register',
              description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Register',
            },
          // {
          //   label: 'Complaint Room',
          //   value: 'complaint',
          //   description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå',
          // },
          // {
          //   label: 'Suggestion Room',
          //   value: 'suggestion',
          //   description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞',
          // },
          // {
          //   label: 'Trade Room',
          //   value: 'trade',
          //   description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Trade',
          // },
          {
            label: 'Talk Room',
            value: 'talk',
            description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ 30 ‡∏´‡πâ‡∏≠‡∏á',
          },
          {
            label: 'Guild Room',
            value: 'guild',
            description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞',
          },
          {
            label: 'Busking Room',
            value: 'busking',
            description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ',
          },
          {
            label: 'GameMatch Room',
            value: 'gamematch',
            description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á GameMatch',
          },
        ]),
    );

    this.logger.debug('Room selection menu created');

    const reply = await interaction.reply({
      embeds: [
        new EmbedBuilder()
          .setTitle('üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á')
          .setDescription(
            `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:\n\n` +
            `- **Welcome Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á MeGuild\n` +
            `- **News Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö MeGuild\n` +
            `- **Register Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏£‡∏∞‡∏ö‡∏ö MeGuild\n` +
            `- **Talk Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n` +
            // `- **Complaint Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö\n` +
            // `- **Suggestion Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö MeGuild\n` +
            // `- **Trade Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô MeGuild\n` +
            `- **Guild Room**: ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n` +
            `- **GameMatch Room**: ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n` +
            `- **Busking Room**: ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô MeGuild\n\n` +
            `‚è∞ **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ`,
          )
          .setColor(0x00bfff),
      ],
      components: [roomSelectionRow],
      ephemeral: true, // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    });

    this.logger.debug('Reply sent with room selection menu');

    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(async () => {
      try {
        await reply.delete();
        this.logger.debug('Auto-deleted room selection message after 1 minute');
      } catch (error) {
        this.logger.warn('Failed to auto-delete room selection message:', error.message);
      }
    }, 1 * 60 * 1000); // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
  }

  @StringSelect('SELECT_MENU_ROOM_TYPE')
  public async handleRoomRegistration(@Context() [interaction]: StringSelectContext) {
    this.logger.debug('handleRoomRegistration called with interaction:', interaction);

    // Defer reply ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô timeout
    await interaction.deferReply({ ephemeral: true });

    const server = await this.serverRepository.getServerById(interaction.guildId);
    if (!server) {
      this.logger.warn('Server not found for guildId:', interaction.guildId);
      return this.editReplyError(interaction, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
    }

    this.logger.debug('Server found:', server);

    const roomType = interaction.values[0];
    this.logger.debug('Room type selected:', roomType);

    const roomFieldMapping = this.getRoomFieldMapping();
    const defaultRoomNames = this.getDefaultRoomNames();

    const existingChannel = interaction.guild.channels.cache.find(
      (channel) => channel.id === server[roomFieldMapping[roomType]],
    );

    if (existingChannel) {
      this.logger.warn('Existing channel found:', existingChannel.name);
      return this.editReplyStopCreate(interaction, roomType, existingChannel.name);
    }

    try {
      if (roomType === 'gamematch') {
        this.logger.debug('Creating GameMatch rooms');
        await this.createGameMatchRooms(interaction, defaultRoomNames);
      } else if (roomType === 'busking') {
        this.logger.debug('Creating Busking room');
        await this.createBuskingRoom(interaction);
      } else if (roomType === 'talk') {
        this.logger.debug('Creating Talk rooms');
        await this.createTalkRooms(interaction);
      } else if (roomType === 'guild') {
        this.logger.debug('Creating Guild room with roles');
        await this.createGuildRoom(interaction, defaultRoomNames, roomFieldMapping);
      } else {
        this.logger.debug('Creating single room of type:', roomType);
        await this.createSingleRoom(interaction, roomType, defaultRoomNames, roomFieldMapping);
      }
    } catch (error) {
      this.logger.error(`Error creating room: ${error.message}`);

      let errorMessage = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á';
      if (error.message === 'Missing Permissions') {
        this.logger.error('Missing Permissions');
        errorMessage = '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏±‡∏ö Bot';
      }
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setTitle('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
            .setDescription(errorMessage)
            .setColor(0xff0000),
        ],
        components: [],
      });
    }
  }

  private getRoomFieldMapping() {
    return {
      welcome: 'welcomechannel',
      news: 'newsChannel',
      register: 'registerChannel',
      trade: 'tradeChannel',
      complaint: 'complaintChannel',
      suggestion: 'suggestionChannel',
      guild: 'guildChannel',
      talk: 'talkChannel',
      gamematch: 'gameChannel',
      gamebtn: 'gamebtnChannel',
    };
  }

  private getDefaultRoomNames() {
    return {
      welcome: 'üö™Ô∏∞ùëæùíÜùíçùíÑùíêùíéùíÜ', // ‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡πÅ‡∏ä‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      news: 'üì¢Ô∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£', // ‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡πÅ‡∏ä‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      register: 'üßæÔ∏∞‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', // ‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡πÅ‡∏ä‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      trade: 'üí±Ô∏∞ùëªùíìùíÇùíÖùíÜ ‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢',
      complaint: 'üì¢Ô∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå',
      suggestion: 'üí°Ô∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞',
      guild: 'üé≠Ô∏∞ùëÆùíñùíäùíçùíÖ-ùë≥ùíäùíîùíï', //‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡πÅ‡∏ä‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      gamematch: 'üëºÔ∏∞‡∏´‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°', // ‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡πÅ‡∏ä‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      gamebtn: 'üí¨Ô∏∞‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°', // ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏Å‡∏° ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡πÅ‡∏ä‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    };
  }

  private async createSingleRoom(
    interaction: StringSelectMenuInteraction<CacheType>,
    roomType: string,
    defaultRoomNames: any,
    roomFieldMapping: any,
  ) {
    this.logger.debug('createSingleRoom called with roomType:', roomType);

    const guild = interaction.guild;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ùë¥ùíÜùëÆùíñùíäùíçùíÖ ùë™ùíÜùíèùíïùíÜùíì
    const meguildPositionCreate = await this.serverRepository.getServerById(interaction.guildId);
    let meguildCategory = guild.channels.cache.get(
      meguildPositionCreate?.meguildPositionCreate || '',
    );

    if (!meguildCategory || meguildCategory.type !== 4) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô Category
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
      const newCategory = await guild.channels.create({
        name: `„Äîüëë„Äïùë¥ùíÜùëÆùíñùíäùíçùíÖ ùë™ùíÜùíèùíïùíÜùíì`,
        type: 4, // Category Channel
        position: 0,
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id, // @everyone role
            allow: ['ViewChannel', 'ReadMessageHistory'],
          },
        ],
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.serverRepository.updateServer(interaction.guildId, {
        meguildPositionCreate: newCategory.id,
      });

      meguildCategory = newCategory;
    }

    // ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô ùë¥ùíÜùëÆùíñùíäùíçùíÖ ùë™ùíÜùíèùíïùíÜùíì
    const channelPositionMapping = {
      welcome: 0,
      news: 1,
      register: 2,
    };

    const newRoom = await guild.channels.create({
      name: defaultRoomNames[roomType],
      type: 0, // Text Channel
      parent: meguildCategory.id, // ‡∏ï‡∏±‡πâ‡∏á parent ‡πÄ‡∏õ‡πá‡∏ô ùë¥ùíÜùëÆùíñùíäùíçùíÖ ùë™ùíÜùíèùíïùíÜùíì
      position: channelPositionMapping[roomType], // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á
      permissionOverwrites: [
        {
          id: guild.roles.everyone.id, // @everyone role
          allow: ['ViewChannel', 'ReadMessageHistory'],
          deny: ['SendMessages'],
        },
      ],
    });

    this.logger.debug('New room created:', newRoom.name);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await this.serverRepository.updateServer(interaction.guildId, {
      [roomFieldMapping[roomType]]: newRoom.id,
    });

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ `this.roomName`
    this.roomName = newRoom.name;

    if (roomType === 'register') {
      await this.createRegistrationMessage(newRoom);
    }

    return this.editReplySuccess(interaction, roomType);
  }

  private async createGameMatchRooms(
    interaction: StringSelectMenuInteraction<CacheType>,
    defaultRoomNames: any,
  ) {
    this.logger.debug('createGameMatchRooms called');

    const server = await this.serverRepository.getServerById(interaction.guildId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á REGISTER ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const registerChannelId = server?.registerChannel;
    const registerChannel = interaction.guild.channels.cache.get(registerChannelId);

    if (!registerChannel) {
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setTitle('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á GameMatch ‡πÑ‡∏î‡πâ')
            .setDescription('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á **REGISTER** ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á GameMatch')
            .setColor(0xff0000),
        ],
      });
    }

    // Create a category (group) for the game channels
    const gameCategory = await interaction.guild.channels.create({
      name: `„ÄîüéÆ„ÄïùëÆùíÇùíéùíÜ ùë™ùíÜùíèùíïùíÜùíì`,
      type: 4, // Category Channel
      permissionOverwrites: [
        {
          id: interaction.guild.roles.everyone.id, // @everyone role
          allow: ['ViewChannel', 'ReadMessageHistory'],
        },
      ],
    });

    this.logger.debug('Game category created:', gameCategory.name);

    // Create game button text channel under the category
    const gameChannel = await interaction.guild.channels.create({
      name: defaultRoomNames['gamebtn'],
      type: 0, // Text Channel
      parent: gameCategory.id, // Set the category as the parent
      permissionOverwrites: [
        {
          id: interaction.guild.roles.everyone.id, // @everyone role
          allow: ['ViewChannel', 'ReadMessageHistory'],
          deny: ['SendMessages'],
        },
      ],
    });

    // Create game match text channel under the category
    const gamePositionCreate = await interaction.guild.channels.create({
      name: defaultRoomNames['gamematch'],
      type: 0, // Text Channel
      parent: gameCategory.id, // Set the category as the parent
      permissionOverwrites: [
        {
          id: interaction.guild.roles.everyone.id, // @everyone role
          allow: ['ViewChannel', 'ReadMessageHistory'],
          deny: ['SendMessages'],
        },
      ],
    });

    // Update the database with the new channels
    await this.serverRepository.updateServer(interaction.guildId, {
      gameChannel: gameChannel.id,
      gamePostChannel: gamePositionCreate.id,
      gamePositionCreate: gameCategory.id,
    });

    // Build the embed message
    const embeds = new EmbedBuilder()
      .setTitle('ùë¥ùíÜùëÆùíñùíäùíçùíÖ ùëÆùíÇùíéùíÜùíî ùë™ùíÜùíèùíïùíÜùíì')
      .setColor(10513407)
      .setImage(
        'https://media.discordapp.net/attachments/855643137716650015/1287768914490691627/DALLE_2024-09-23_20.33.10_-_A_vibrant_fantasy-themed_banner_with_the_text_Game_Center_displayed_prominently._The_background_includes_a_magical_battlefield_scene_with_elements_l.webp?ex=66f2bfc2&is=66f16e42&hm=e3f5bf29bc2d01cd93f4868ac6c2d655ee4893c90ecffa3b6bb5f01cae705147&=&animated=true&width=840&height=480',
      )
      .setThumbnail('https://cdn-icons-png.flaticon.com/512/6521/6521996.png');

    // Build the action row with buttons
    const actionRow = new ActionRowBuilder<ButtonBuilder>().setComponents(
      new ButtonBuilder()
        .setCustomId('game-create-room')
        .setEmoji('üéÆ') // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏Å‡∏°"
        .setLabel('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÄ‡∏Å‡∏°')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('game-join')
        .setEmoji('üïπÔ∏è') // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏Å‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"
        .setLabel('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏Å‡∏°')
        .setStyle(ButtonStyle.Primary),
    );

    // Send the embed and buttons to the game button channel
    await gameChannel.send({
      embeds: [embeds],
      components: [actionRow],
    });
    // Reply to the interaction to confirm the creation
    return interaction.editReply({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
          .setDescription(
            `üéâ ‡∏´‡πâ‡∏≠‡∏á **${defaultRoomNames['gamebtn']}** ‡πÅ‡∏•‡∏∞ **${defaultRoomNames['gamematch']}** ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà **Game Center**!`,
          )
          .setColor(0x00ff00),
      ],
    });
  }

  private async createRegistrationMessage(channel: TextChannel) {
    const embed = new EmbedBuilder()
      .setTitle('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢')
      .setDescription('- ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"')
      .setColor(16760137)
      .setFooter({ text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö' })
      .setImage(
        'https://imagedelivery.net/QZ6TuL-3r02W7wQjQrv5DA/31920c9b-3108-4221-fae3-030b45e2b200/public',
      )
      .setThumbnail('https://cdn-icons-png.flaticon.com/512/6521/6521996.png');
    const actionRow = new ActionRowBuilder<ButtonBuilder>().setComponents(
      new ButtonBuilder()
        .setCustomId('register-button')
        .setEmoji('üìù')
        .setLabel('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('register-guild')
        .setEmoji('üìù')
        .setLabel('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏•‡∏•‡πå')
        .setStyle(ButtonStyle.Primary),
    );

    return channel.send({ embeds: [embed], components: [actionRow] });
  }

  private async createBuskingMessage(channel: TextChannel) {
    const embed = new EmbedBuilder()
      .setTitle('üé© ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á')
      .setDescription(
        'üåü **‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏ã‡∏ô‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á!** üåü\n\n' +
        'üìã **‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á:**\n' +
        '‚Ä¢ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏î (Live Performance)\n' +
        '‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ (Talent Competition)\n' +
        '‚Ä¢ Workshop ‡∏™‡∏≠‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞ (Skill Workshop)\n' +
        '‚Ä¢ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (Entertainment Events)\n\n' +
        'üé≠ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!'
      )
      .setColor(0xffb347) // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏ó‡∏≠‡∏á
      .setFooter({ text: '‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏°‡∏ä‡∏ô!' })
      .setImage(
        'https://imagedelivery.net/QZ6TuL-3r02W7wQjQrv5DA/31920c9b-3108-4221-fae3-030b45e2b200/public',
      )
      .setThumbnail('https://cdn-icons-png.flaticon.com/512/3515/3515174.png'); // entertainment icon

    const actionRow = new ActionRowBuilder<ButtonBuilder>().setComponents(
      new ButtonBuilder()
        .setCustomId('busking-request-activity')
        .setEmoji('üé™')
        .setLabel('‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('busking-schedule-view')
        .setEmoji('üìÖ')
        .setLabel('‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°')
        .setStyle(ButtonStyle.Secondary),
    );

    return channel.send({ embeds: [embed], components: [actionRow] });
  }

  @Button('busking-request-activity')
  public async createBuskingRequestActivity(@Context() [interaction]: ButtonContext) {

    

    const member = interaction.member as GuildMember;
    const voiceChannel = member.voice.channel;
    if (!voiceChannel) {
      await interaction.reply({
        content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ',
        ephemeral: true, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
        fetchReply: true, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ
      });
      return;
    }
    

    try {
      await interaction.deferReply({ ephemeral: true });

      const topic = member.displayName + ' ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß';
      const stageChannel = await this.stageChannelService.createStageChannel(
        interaction as unknown as CommandInteraction<CacheType>,
        topic,
      );

      await interaction.editReply({
        content: `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Stage Channel "${stageChannel.name}" ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏ó‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${topic}\n\n‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡∏Ç‡∏≠‡∏û‡∏π‡∏î' (Request to Speak) ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á`,
      });
    } catch (error) {
      this.logger.error('Create stage command failed:', error);
      await interaction.editReply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Stage Channel ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      });
    }
  }

  private async validateAndRepairGuildRoles(interaction: StringSelectMenuInteraction<CacheType>) {
    this.logger.debug('validateAndRepairGuildRoles called');

    const guild = interaction.guild;
    const server = await this.serverRepository.getServerById(interaction.guildId);

    if (!server) {
      this.logger.warn('Server data not found');
      return { headRole: null, coRole: null };
    }

    let headRole = null;
    let coRole = null;
    let needsUpdate = false;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö guildHeadRoleId
    if (server.guildHeadRoleId) {
      headRole = guild.roles.cache.get(server.guildHeadRoleId);
      if (!headRole) {
        this.logger.warn('Guild head role not found in Discord, creating new one');
        headRole = await guild.roles.create({
          name: 'üëë ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå',
          color: 0xffd700, // ‡∏™‡∏µ‡∏ó‡∏≠‡∏á
          permissions: ['Administrator'],
          reason: 'Repaired missing guild head role',
        });
        needsUpdate = true;
      }
    } else {
      this.logger.warn('Guild head role ID not found in database, creating new one');
      headRole = await guild.roles.create({
        name: 'üëë ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå',
        color: 0xffd700, // ‡∏™‡∏µ‡∏ó‡∏≠‡∏á
        permissions: ['Administrator'],
        reason: 'Created missing guild head role',
      });
      needsUpdate = true;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö guildCoRoleId
    if (server.guildCoRoleId) {
      coRole = guild.roles.cache.get(server.guildCoRoleId);
      if (!coRole) {
        this.logger.warn('Guild co-role not found in Discord, creating new one');
        coRole = await guild.roles.create({
          name: '‚≠ê ‡∏£‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå',
          color: 0x00bfff, // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
          permissions: ['ManageChannels', 'ManageRoles', 'KickMembers', 'BanMembers'],
          reason: 'Repaired missing guild co-role',
        });
        needsUpdate = true;
      }
    } else {
      this.logger.warn('Guild co-role ID not found in database, creating new one');
      coRole = await guild.roles.create({
        name: '‚≠ê ‡∏£‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå',
        color: 0x00bfff, // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
        permissions: ['ManageChannels', 'ManageRoles', 'KickMembers', 'BanMembers'],
        reason: 'Created missing guild co-role',
      });
      needsUpdate = true;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    if (needsUpdate) {
      await this.serverRepository.updateServer(interaction.guildId, {
        guildHeadRoleId: headRole.id,
        guildCoRoleId: coRole.id,
      });
      this.logger.log('Updated guild role IDs in database');
    }

    return { headRole, coRole };
  }

  private async createGuildRoom(
    interaction: StringSelectMenuInteraction<CacheType>,
    defaultRoomNames: any,
    roomFieldMapping: any,
  ) {
    this.logger.debug('createGuildRoom called');

    const guild = interaction.guild;
    const server = await this.serverRepository.getServerById(interaction.guildId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ùë¥ùíÜùëÆùíñùíäùíçùíÖ ùë™ùíÜùíèùíïùíÜùíì
    const meguildPositionCreate = await this.serverRepository.getServerById(interaction.guildId);
    let meguildCategory = guild.channels.cache.get(
      meguildPositionCreate?.meguildPositionCreate || '',
    );

    if (!meguildCategory || meguildCategory.type !== 4) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô Category
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
      const newCategory = await guild.channels.create({
        name: `„Äîüëë„Äïùë¥ùíÜùëÆùíñùíäùíçùíÖ ùë™ùíÜùíèùíïùíÜùíì`,
        type: 4, // Category Channel
        position: 0,
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id, // @everyone role
            allow: ['ViewChannel', 'ReadMessageHistory'],
          },
        ],
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.serverRepository.updateServer(interaction.guildId, {
        meguildPositionCreate: newCategory.id,
      });

      meguildCategory = newCategory;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó Guild
    const { headRole, coRole } = await this.validateAndRepairGuildRoles(interaction);

    if (!headRole || !coRole) {
      this.logger.error('Failed to validate or create guild roles');
      return interaction.editReply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ',
      });
    }

    this.logger.debug('Guild roles validated:', { headRole: headRole.name, coRole: coRole.name });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Guild ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà MeGuild Center
    const guildChannel = await guild.channels.create({
      name: defaultRoomNames.guild,
      type: ChannelType.GuildText,
      parent: meguildCategory.id, // ‡πÉ‡∏ä‡πâ MeGuild Center ‡πÄ‡∏õ‡πá‡∏ô parent
      permissionOverwrites: [
        {
          id: guild.roles.everyone.id, // @everyone role
          deny: ['SendMessages'], // ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          allow: ['ViewChannel', 'ReadMessageHistory'],
        },
        {
          id: headRole.id, // ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå
          allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory', 'ManageMessages'],
        },
        {
          id: coRole.id, // ‡∏£‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå
          allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory', 'ManageMessages'],
        },
      ],
    });

    this.logger.debug('Guild channel created:', guildChannel.name);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ guildChannel ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ role IDs ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô validateAndRepairGuildRoles)
    await this.serverRepository.updateServer(interaction.guildId, {
      guildChannel: guildChannel.id,
    });

    this.roomName = guildChannel.name;
    return this.editReplySuccess(interaction, 'guild');
  }

  private async createTalkRooms(interaction: StringSelectMenuInteraction<CacheType>) {
    this.logger.debug('createTalkRooms called');

    const guild = interaction.guild;
    const server = await this.serverRepository.getServerById(interaction.guildId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Talk Zone
    let talkCategory = guild.channels.cache.get(server?.talkPositionCreate || '');

    if (!talkCategory || talkCategory.type !== ChannelType.GuildCategory) {
      this.logger.warn('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Talk Zone ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Talk Zone ‡πÉ‡∏´‡∏°‡πà
      talkCategory = await guild.channels.create({
        name: '„Äîüí¨„ÄïùëªùíÇùíçùíå ùíÅùíêùíèùíÜ',
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id, // @everyone role
            allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory', 'Connect', 'Speak'],
          },
        ],
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.serverRepository.updateServer(interaction.guildId, {
        talkPositionCreate: talkCategory.id,
      });
    }

    // üõë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á Talk ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingTalkChannel = guild.channels.cache.get(server?.talkChannel || '');
    if (existingTalkChannel) {
      return this.editReplyStopCreate(interaction, 'talk', existingTalkChannel.name);
    }

    this.logger.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Talk ‡πÉ‡∏´‡∏°‡πà');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Talk ‡∏´‡∏•‡∏±‡∏Å
    const talkChannel = await guild.channels.create({
      name: 'üí¨ùóßùóÆùóπùó∏ ùóõùóÆùóπùóπ',
      type: ChannelType.GuildText,
      parent: talkCategory.id, // ‡πÉ‡∏ä‡πâ Talk Zone ‡πÄ‡∏õ‡πá‡∏ô parent
      permissionOverwrites: [
        {
          id: guild.roles.everyone.id, // @everyone role
          allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory'],
        },
      ],
    });

    this.logger.debug('Talk channel created:', talkChannel.name);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await this.serverRepository.updateServer(interaction.guildId, {
      talkChannel: talkChannel.id,
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ 30 ‡∏´‡πâ‡∏≠‡∏á
    for (let i = 1; i <= 30; i++) {
      await guild.channels.create({
        name: `ü™ë‚Ä¢ ‡πÇ‡∏ï‡πä‡∏∞ ${i}`,
        type: ChannelType.GuildVoice,
        parent: talkCategory.id, // ‡πÉ‡∏ä‡πâ Talk Zone ‡πÄ‡∏õ‡πá‡∏ô parent
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id, // @everyone role
            allow: ['ViewChannel', 'Connect', 'Speak'],
          },
        ],
      });
    }

    this.logger.debug('Talk voice channels created (30 rooms)');

    this.roomName = talkChannel.name;
    return this.editReplySuccess(interaction, 'talk');
  }

  private async createBuskingRoom(interaction: StringSelectMenuInteraction<CacheType>) {
    this.logger.debug('createBuskingRoom called');

    const guild = interaction.guild;
    const server = await this.serverRepository.getServerById(interaction.guildId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Busking Center
    let buskingCategory = guild.channels.cache.get(server?.buskingPositionCreate || '');

    if (!buskingCategory || buskingCategory.type !== ChannelType.GuildCategory) {
      this.logger.warn('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Busking Center ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
      buskingCategory = await guild.channels.create({
        name: '„Äîüé©„Äïùë©ùíñùíîùíåùíäùíèùíà ùë™ùíÜùíèùíïùíÜùíì',
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id, // @everyone role
            allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory'],
          },
        ],
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.serverRepository.updateServer(interaction.guildId, {
        buskingPositionCreate: buskingCategory.id,
      });
    }

    // üõë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á Busking ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingBuskingChannel = guild.channels.cache.get(server?.buskingChannel || '');
    if (existingBuskingChannel) {
      return this.editReplyStopCreate(interaction, 'busking', existingBuskingChannel.name);
    }

    this.logger.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Busking ‡πÉ‡∏´‡∏°‡πà');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Busking
    const buskingChannel = await guild.channels.create({
      name: 'üé©ùóòùóªùòÅùó≤ùóøùòÅùóÆùó∂ùóª ùó≠ùóºùóªùó≤',
      type: ChannelType.GuildText,
      parent: buskingCategory.id,
      permissionOverwrites: [
        {
          id: guild.roles.everyone.id, // @everyone role
          allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory'],
        },
      ],
    });

    this.logger.debug('Busking channel created:', buskingChannel.name);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await this.serverRepository.updateServer(interaction.guildId, {
      buskingChannel: buskingChannel.id,
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏±‡∏Å‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ 5 ‡∏´‡πâ‡∏≠‡∏á
    for (let i = 1; i <= 5; i++) {
      await guild.channels.create({
        name: `üîä„Éª‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ ${i}`,
        type: ChannelType.GuildVoice,
        parent: buskingCategory.id,
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id, // @everyone role
            allow: ['ViewChannel', 'Connect', 'Speak'],
          },
        ],
      });
    }

    this.logger.debug('Busking voice channels created');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Busking
    await this.createBuskingMessage(buskingChannel);

    this.roomName = buskingChannel.name;
    return this.editReplySuccess(interaction, 'busking');
  }

  private editReplyStopCreate(
    interaction: StringSelectMenuInteraction<CacheType>,
    roomType: string,
    existingChannelName: string,
  ) {
    return interaction.editReply({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ')
          .setDescription(
            `‡∏´‡πâ‡∏≠‡∏á **${roomType.toUpperCase()}** ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:\n` +
              `**${existingChannelName}**\n` +
              `‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô`,
          )
          .setColor(0xffa500),
      ],
      components: [],
    });
  }

  private editReplyError(interaction: any, message: string) {
    return interaction.editReply({
      embeds: [
        new EmbedBuilder().setTitle('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î').setDescription(message).setColor(0xff0000),
      ],
    });
  }

  private editReplySuccess(interaction: StringSelectMenuInteraction<CacheType>, roomType: string) {
    return interaction.editReply({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
          .setDescription(
            `üéâ ‡∏´‡πâ‡∏≠‡∏á **${this.roomName}** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó **${roomType.toUpperCase()}** ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`,
          )
          .setColor(0x00ff00),
      ],
      components: [],
    });
  }

  // ‡πÄ‡∏Å‡πá‡∏ö methods ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
  private replyStopCreate(
    interaction: StringSelectMenuInteraction<CacheType>,
    roomType: string,
    existingChannelName: string,
  ) {
    return interaction.update({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ')
          .setDescription(
            `‡∏´‡πâ‡∏≠‡∏á **${roomType.toUpperCase()}** ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:\n` +
              `**${existingChannelName}**\n` +
              `‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô`,
          )
          .setColor(0xffa500),
      ],
      components: [],
    });
  }

  private replyError(interaction: any, message: string) {
    return interaction.reply({
      embeds: [
        new EmbedBuilder().setTitle('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î').setDescription(message).setColor(0xff0000),
      ],
      ephemeral: true,
    });
  }

  private replySuccess(interaction: StringSelectMenuInteraction<CacheType>, roomType: string) {
    return interaction.update({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
          .setDescription(
            `üéâ ‡∏´‡πâ‡∏≠‡∏á **${this.roomName}** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó **${roomType.toUpperCase()}** ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`,
          )
          .setColor(0x00ff00),
      ],
      components: [],
    });
  }
}
