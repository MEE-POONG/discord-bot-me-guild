import { Injectable } from '@nestjs/common';
import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, Colors } from 'discord.js';
import { Track } from 'discord-player';

@Injectable()
export class UiService {
  createNowPlayingEmbed(track: Track, progress?: string): EmbedBuilder {
    const embed = new EmbedBuilder()
      .setColor(Colors.Blurple)
      .setTitle('üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô')
      .setDescription(`**${track.title}**`)
      .addFields(
        { name: 'üë§ ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô', value: track.author || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
        { name: '‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', value: track.duration || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
        { name: 'üì∫ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤', value: 'YouTube', inline: true }
      )
      .setThumbnail(track.thumbnail || 'https://i.imgur.com/placeholder.png')
      .setFooter({ text: 'üé∂ Music Bot ‚Ä¢ ‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á' })
      .setTimestamp();

    if (progress) {
      embed.addFields({ name: 'üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤', value: progress, inline: false });
    }

    return embed;
  }

  createQueueEmbed(tracks: Track[], currentIndex: number = 0): EmbedBuilder {
    const embed = new EmbedBuilder()
      .setColor(Colors.Green)
      .setTitle('üìã ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á')
      .setDescription(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á ${Math.min(tracks.length, 10)} ‡∏à‡∏≤‡∏Å ${tracks.length} ‡πÄ‡∏û‡∏•‡∏á`)
      .setFooter({ text: 'üé∂ Music Bot ‚Ä¢ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á' })
      .setTimestamp();

    const queueList = tracks.slice(0, 10).map((track, index) => {
      const isCurrent = index === currentIndex;
      const prefix = isCurrent ? 'üéµ' : `${index + 1}.`;
      const duration = track.duration || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      return `${prefix} **${track.title}** - ${track.author} \`${duration}\``;
    }).join('\n');

    embed.addFields({ name: 'üéº ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á', value: queueList || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß', inline: false });

    return embed;
  }

  createSearchResultEmbed(track: Track, isRandom: boolean = false): EmbedBuilder {
    const embed = new EmbedBuilder()
      .setColor(isRandom ? Colors.Purple : Colors.Blue)
      .setTitle(isRandom ? 'üé≤ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß!' : 'üéµ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß')
      .setDescription(`**${track.title}**`)
      .addFields(
        { name: 'üë§ ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô', value: track.author || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
        { name: '‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', value: track.duration || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
        { name: 'üì∫ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤', value: 'YouTube', inline: true }
      )
      .setThumbnail(track.thumbnail || 'https://i.imgur.com/placeholder.png')
      .setFooter({ text: isRandom ? 'üé≤ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á ‚Ä¢ Music Bot' : 'üéµ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á ‚Ä¢ Music Bot' })
      .setTimestamp();

    return embed;
  }

  createErrorEmbed(message: string, isFallback: boolean = false): EmbedBuilder {
    const embed = new EmbedBuilder()
      .setColor(isFallback ? Colors.Orange : Colors.Red)
      .setTitle(isFallback ? '‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á' : '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
      .setDescription(message)
      .setFooter({ text: 'üé∂ Music Bot ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' })
      .setTimestamp();

    return embed;
  }

  createSuccessEmbed(message: string): EmbedBuilder {
    const embed = new EmbedBuilder()
      .setColor(Colors.Green)
      .setTitle('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      .setDescription(message)
      .setFooter({ text: 'üé∂ Music Bot ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
      .setTimestamp();

    return embed;
  }

  createMusicControlButtons(): ActionRowBuilder<ButtonBuilder> {
    return new ActionRowBuilder<ButtonBuilder>()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('music_previous')
          .setEmoji('‚èÆÔ∏è')
          .setStyle(ButtonStyle.Secondary)
          .setDisabled(true),
        new ButtonBuilder()
          .setCustomId('music_pause')
          .setEmoji('‚è∏Ô∏è')
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId('music_skip')
          .setEmoji('‚è≠Ô∏è')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('music_stop')
          .setEmoji('‚èπÔ∏è')
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId('music_queue')
          .setEmoji('üìã')
          .setStyle(ButtonStyle.Secondary)
      );
  }

  createVolumeControlButtons(): ActionRowBuilder<ButtonBuilder> {
    return new ActionRowBuilder<ButtonBuilder>()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('volume_down')
          .setEmoji('üîâ')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('volume_mute')
          .setEmoji('üîá')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('volume_up')
          .setEmoji('üîä')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('volume_50')
          .setLabel('50%')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('volume_100')
          .setLabel('100%')
          .setStyle(ButtonStyle.Secondary)
      );
  }

  createProgressBar(current: number, total: number, length: number = 20): string {
    const percentage = Math.min(100, Math.max(0, (current / total) * 100));
    const filled = Math.round((percentage / 100) * length);
    const empty = length - filled;
    
    const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
    const timeCurrent = this.formatTime(current);
    const timeTotal = this.formatTime(total);
    
    return `\`${timeCurrent}\` ${bar} \`${timeTotal}\` \`${percentage.toFixed(1)}%\``;
  }

  private formatTime(ms: number): string {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  createWelcomeEmbed(): EmbedBuilder {
    return new EmbedBuilder()
      .setColor(Colors.Blurple)
      .setTitle('üéµ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Music Bot')
      .setDescription('‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô!')
      .addFields(
        { name: 'üéÆ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å', value: '`/play` - ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á\n`/random` - ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á\n`/queue` - ‡∏î‡∏π‡∏Ñ‡∏¥‡∏ß', inline: true },
        { name: 'üéõÔ∏è ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°', value: '`/pause` - ‡∏´‡∏¢‡∏∏‡∏î/‡πÄ‡∏•‡πà‡∏ô\n`/skip` - ‡∏Ç‡πâ‡∏≤‡∏°\n`/stop` - ‡∏´‡∏¢‡∏∏‡∏î', inline: true },
        { name: 'üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', value: '`/volume` - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n`/nowplaying` - ‡∏î‡∏π‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', inline: true }
      )
      .setThumbnail('https://i.imgur.com/music-bot-icon.png')
      .setFooter({ text: 'üé∂ Music Bot ‚Ä¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' })
      .setTimestamp();
  }
}
