generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ActDetailDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @db.Date
  createdBy   String
  deleteBy    String
  description String
  dislink     String
  disname     String
  enddate     String
  img         String
  point       String
  startdate   String
  title       String
  type        String
  updatedAt   DateTime @db.Date
  updatedBy   String
}

model ActType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  createdBy String
  deleteBy  String
  name      String
  updatedAt DateTime @db.Date
  updatedBy String
}

model BlogDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  creditlink  String
  description String
  img         String
  video       String
  createdAt   DateTime @db.Date
  createdBy   String
  updatedAt   DateTime @db.Date
  updatedBy   String
  deleteBy    String
}

model CheckOnlineDB {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  discord_id      String?
  checkIn         DateTime  @default(now())
  checkOut        DateTime?
  totalOnlineTime Int       @default(0)
  createdAt       DateTime  @default(now())
  createdBy       String?
  updatedAt       DateTime  @updatedAt
  updatedBy       String
  deleteBy        String
}

model CommentDB {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userID    String
  content   String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String? // Make this optional
  deleteBy  String? // Make this optional
}

model CustomerDB {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  createdBy  String
  deleteBy   String
  discord_id String   @unique
  email      String   @unique
  password   String
  server     String   @unique
  updatedAt  DateTime @db.Date
  updatedBy  String
  username   String
}

model GameCategoryDB {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @db.Date
  createdBy String
  updatedAt DateTime @db.Date
  updatedBy String
  deleteBy  String
}

model GameConditionMatchDB {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  maxParty     Int
  limitNumber  Int           @default(0)
  gameOnlineDB GameOnlineDB? @relation(fields: [gameId], references: [id])
  gameId       String        @db.ObjectId
  createdAt    DateTime      @default(now())
  createdBy    String?
  updatedAt    DateTime      @updatedAt
  updatedBy    String
  deleteBy     String
}

model GameOnlineDB {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  game_name            String
  logo                 String?
  numberMatch          String?
  partyLimit           BigInt
  ranking              Boolean
  createdAt            DateTime               @db.Date
  createdBy            String?
  updatedAt            DateTime               @db.Date
  updatedBy            String
  deleteBy             String
  // ความสัมพันธ์ many-to-many ผ่าน GameTypeGame
  gameTypeGame         GameTypeGame[]         @relation("GameOnlineToGameTypeGame")
  GameRankDB           GameRankDB[]
  GameConditionMatchDB GameConditionMatchDB[]
}

model GameMatchDB {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  gameId       String   @db.ObjectId
  rank         Boolean
  selectRankID String?  @db.ObjectId
  channel_id   String
  partyLimit   Int
  limitNumber  Int
  status       Boolean
  members      String[]
  createdAt    DateTime @default(now())
  createdBy    String?
  updatedAt    DateTime @updatedAt
  updatedBy    String
  deleteBy     String
}

model GameTypeDB {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  categoryId String   @db.ObjectId
  createdAt  DateTime @db.Date
  createdBy  String
  updatedAt  DateTime @db.Date
  updatedBy  String
  deleteBy   String

  // ความสัมพันธ์ many-to-many ผ่าน GameTypeGame
  gameTypeGame GameTypeGame[] @relation("GameTypeToGameTypeGame")
}

model GameTypeGame {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  createdBy String
  updatedAt DateTime @db.Date
  updatedBy String
  deleteBy  String

  // ความสัมพันธ์กับ GameOnlineDB
  gameId       String?       @db.ObjectId
  gameOnlineDB GameOnlineDB? @relation(fields: [gameId], references: [id], onDelete: Cascade, name: "GameOnlineToGameTypeGame")

  // ความสัมพันธ์กับ GameTypeDB
  typeId     String?     @db.ObjectId
  gameTypeDB GameTypeDB? @relation(fields: [typeId], references: [id], onDelete: Cascade, name: "GameTypeToGameTypeGame")
}

model GameRankDB {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  gameOnlineDB GameOnlineDB? @relation(fields: [gameId], references: [id])
  gameId       String?       @db.ObjectId
  imgRank      String
  selcetShow   String
  nameRank     String
  number       BigInt
  createdAt    DateTime      @db.Date
  createdBy    String
  updatedAt    DateTime      @db.Date
  updatedBy    String
  deleteBy     String
}

model GuildDB {
  id                       String         @id @default(auto()) @map("_id") @db.ObjectId
  Logo                     String         @default("https://www.design365print.com/UploadFile/Blog/blog_941976621.jpg")
  guild_copper             BigInt?
  guild_leader             String?
  guild_level              BigInt?
  guild_name               String?
  guild_roleId             String?
  guild_size               BigInt?
  guild_room_chat          String?
  guild_room_mainHall      String?
  guild_room_secondaryHall String?
  guild_room_activity      String?
  guild_room_visiting      String?
  GuildMembers             GuildMembers[]
}

model GuildCreateReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId   String
  channelId String
  messageId String
  guildName String
  members   String[]
}

model GuildMembers {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  guildId  String?  @db.ObjectId
  position String
  userId   String
  guildDB  GuildDB? @relation(fields: [guildId], references: [id])
}

model GuildProfileDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  avatar      String
  backdrop    String
  createdAt   DateTime @db.Date
  createdBy   String
  deleteBy    String
  description String
  discordlink String
  guildId     String?
  guildname   String
  rule        String
  updatedAt   DateTime @db.Date
  updatedBy   String
}

model ImageList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nameFile  String
  imageUrl  String   @unique
  modalName String
  createdAt DateTime @db.Date
  createdBy String
  updatedAt DateTime @db.Date
  updatedBy String
  deleteBy  String
}

model GuildInviteDataDB {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  guildId String
  userId  String
}

model GuildInviteRequest {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  guildId String
  userId  String
}

model NewsCategoryDB {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  createdBy String
  deleteBy  String
  title     String
  updatedAt DateTime @db.Date
  updatedBy String
}

model NewsTypeDB {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @db.ObjectId
  createdAt  DateTime @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  createdBy  String
  deleteBy   String
  title      String
  updatedAt  DateTime @db.Date
  updatedBy  String
}

model NewsTypeNews {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  createdBy    String
  deleteBy     String
  newsUpdateId String   @db.ObjectId
  typeId       String   @db.ObjectId
  updatedAt    DateTime @db.Date
  updatedBy    String
}

model NewsUpdateDB {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  creditlink  String
  description String
  img         String
  title       String
  createdAt   DateTime  @db.Date
  createdBy   String?
  updatedAt   DateTime? @db.Date
  updatedBy   String?
  deleteBy    String?
}

model ServerDB {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId               String
  serverId              String   @unique
  serverName            String
  Master                Boolean  @default(false)
  openBot               Boolean  @default(false) // เพิ่มค่าเริ่มต้นเป็น false
  adminRoleId           String? // ฟิลด์สำหรับเก็บรหัสบทบาทแอดมิน (optional)
  userRoleId            String? // ฟิลด์สำหรับเก็บรหัสบทบาทผู้ใช้ (optional)
  adventurerRoleId      String?
  visitorRoleId         String?
  guildHeadRoleId       String? // บทบาทหัวหน้ากิล (optional)
  guildCoRoleId         String? // บทบาทรองหัวหน้ากิล (optional)
  openUntilAt           DateTime @db.Date
  meguildPositionCreate String?
  welcomechannel        String?
  newsChannel           String?
  registerChannel       String?
  complaintChannel      String?
  suggestionChannel     String?
  tradeChannel          String?
  guildChannel          String?
  gamePositionCreate    String?
  gameChannel           String?
  gamePostChannel       String?
  buskingPositionCreate String?
  buskingChannel        String?
  createdAt             DateTime @db.Date
  updatedAt             DateTime @db.Date
}

model UserDB {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  birthday          DateTime? @db.Date
  username          String?
  discord_id        String    @unique
  email             String    @unique
  firstname         String?
  gender            String?
  alternativeGender String?
  lastname          String?
  nickname          String?
  password          String?
  createdAt         DateTime  @db.Date
  createdBy         String
  deleteBy          String
  updatedAt         DateTime  @db.Date
  updatedBy         String
  AdminDB           AdminDB[]
}

model UserGameRank {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @db.Date
  deleteBy   String
  gameId     String   @db.ObjectId
  gameRankId String   @db.ObjectId
  invitation Boolean
  updatedAt  DateTime @db.Date
  updatedBy  String
  /// Multiple data types found: String: 85.7%, String (ObjectId): 14.3% out of 14 sampled entries
  userId     Json
}

model WebDefaultDB {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  logoSquare     String? // โลโก้ที่เป็นสี่เหลี่ยม, ค่าเริ่มต้นเป็น null โดยไม่ต้องใส่ @default
  logoCircle     String? // โลโก้ที่เป็นวงกลม, ค่าเริ่มต้นเป็น null โดยไม่ต้องใส่ @default
  logoWide       String? // โลโก้ที่เป็น wide, ค่าเริ่มต้นเป็น null โดยไม่ต้องใส่ @default
  defaultImg     String?
  defaultProfile String?
  facebook       String?
  instagram      String?
  youtube        String?
  tiktok         String?
  gmail          String?
  createdAt      DateTime @default(now())
  createdBy      String?
  updatedAt      DateTime @updatedAt
  updatedBy      String
  deleteBy       String
}

model ProductListDB {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  detail    String
  price     String
  createdAt DateTime  @db.Date
  createdBy String?
  updatedAt DateTime? @db.Date
  updatedBy String?
  deleteBy  String?
}

model ProductRoldDB {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  roldId    String
  roldName  String
  price     String
  createdAt DateTime  @db.Date
  createdBy String?
  updatedAt DateTime? @db.Date
  updatedBy String?
  deleteBy  String?
}

model SalesReportDB {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  adminId   String //คนเช็คสลิป
  slip      String //สลิป
  list      String //รายการขาย
  productID String // สินค้าเพื่ออนาคต ที่ขาย
  roleID    String // ไอดีของ role ในดิสที่ขาย
  price     String //ปรับแก้ให้ด้วย
  Currency  String //สกุลเงินที่ใช้ THbath || MeGuildCoin
  createdAt DateTime  @db.Date
  createdBy String?
  updatedAt DateTime? @db.Date
  updatedBy String?
  deleteBy  String?
}

model MeGuildCoinDB {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  coin_copper  BigInt
  coin_crystal BigInt
  coin_diamond BigInt
  coin_gold    BigInt
  coin_silver  BigInt
  createdAt    DateTime @db.Date
  updatedAt    DateTime @db.Date
  userId       String
}

model PaymentHistoryDB {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  coin_copper  BigInt
  coin_crystal BigInt
  coin_diamond BigInt
  coin_gold    BigInt
  coin_silver  BigInt
  createdAt    DateTime @db.Date
  status       String
  title        String
  updatedAt    DateTime @db.Date
  updatedBy    String
  userId       String
}

model RuleDB {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  topic     String
  IssueBy   Int
  GuildID   String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String
  deleteBy  String
}

model topicDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  ruleId      Int
  description String
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String
  deleteBy    String
}

model TeamDB {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  teamName   String // ชื่อทีม
  represent  String // ทีมจากตัวแทนของ
  members    String[] // รายชื่อสมาชิกในทีม (discord_id หรือ userId)
  TeamLeader String? // ตัวแทนของทีม (optional)
  createdAt  DateTime @default(now())
  createdBy  String?
  updatedAt  DateTime @updatedAt
  updatedBy  String
  deleteBy   String
}

model AdminDB {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  username       String           @unique
  password       String
  name           String
  tel            String
  email          String
  adminRole      AdminRoleDB?     @relation(fields: [roleId], references: [id])
  roleId         String?          @db.ObjectId
  UserDB         UserDB?          @relation(fields: [userDBId], references: [id])
  userDBId       String?          @db.ObjectId
  AdminShifts    AdminShiftDB[]
  createdAt      DateTime         @default(now())
  createdBy      String
  updatedAt      DateTime         @updatedAt
  updatedBy      String           @default("")
  deleteBy       String
  AdminToShiftDB AdminToShiftDB[]
}

model AdminRoleDB {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String              @unique
  description       String?
  adminDB           AdminDB[]
  AdminPermissionDB AdminPermissionDB[]
}

model AdminPermissionDB {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  page      String // ระบุหน้าที่สามารถควบคุมได้ เช่น "dashboard", "users", "settings"
  canView   Boolean      @default(false)
  canCreate Boolean      @default(false)
  canUpdate Boolean      @default(false)
  canDelete Boolean      @default(false)
  adminRole AdminRoleDB? @relation(fields: [roleId], references: [id])
  roleId    String?      @db.ObjectId
}

model AdminShiftDB {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  startTime      DateTime
  endTime        DateTime
  AdminToShiftDB AdminToShiftDB[]
  AdminDB        AdminDB?         @relation(fields: [adminDBId], references: [id])
  adminDBId      String?          @db.ObjectId
}

model AdminToShiftDB {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  adminId      String?       @db.ObjectId
  shiftId      String?       @db.ObjectId
  AdminDB      AdminDB?      @relation(fields: [adminId], references: [id])
  AdminShiftDB AdminShiftDB? @relation(fields: [shiftId], references: [id])
  isLeader     Boolean       @default(false) // ระบุว่าเป็นหัวหน้ากะหรือไม่
}

model NavMenuItemDB {
  id      String             @id @default(auto()) @map("_id") @db.ObjectId
  href    String             @unique
  text    String
  head    Boolean            @default(false)
  icon    String // แทน JSX.Element ด้วย icon name (เช่น "FaChartPie")
  pageID  Boolean            @default(false)
  manager String[]           @default([]) // เก็บรายการที่ใช้กำหนดสิทธิ์
  submenu NavSubMenuItemDB[] @relation("MenuToSubmenu")
}

model NavSubMenuItemDB {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  href    String        @unique
  text    String
  pageID  Boolean       @default(false)
  manager String[]      @default([])
  menuId  String        @db.ObjectId
  menu    NavMenuItemDB @relation(fields: [menuId], references: [id], name: "MenuToSubmenu")
}
