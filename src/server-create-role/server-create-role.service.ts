import { Injectable, Logger } from '@nestjs/common';
import {
  EmbedBuilder,
  ActionRowBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  StringSelectMenuBuilder,
  StringSelectMenuInteraction,
  ModalSubmitInteraction,
  Guild,
} from 'discord.js';
import { Context, Options, StringSelect, StringSelectContext } from 'necord';
import { GuildCreateDto } from 'src/guild-create/dto/length.dto';
import { PrismaService } from 'src/prisma.service';
import { ServerRepository } from 'src/repository/server';
import { validateServerAndRole } from 'src/utils/server-validation.util';
import { ServerCreateRoleNameDto } from './dto/length.dto';

@Injectable()
export class ServerCreateRoleService {
  private readonly logger = new Logger(ServerCreateRoleService.name);
  private roleName;

  constructor(
    private readonly prisma: PrismaService,
    private readonly serverRepository: ServerRepository,
  ) { }

  public onModuleInit() {
    this.logger.log('ServerCreateRoleService initialized');
  }

  // Step 1: Display Select Menu
  async ServerCreateRoleSystem(interaction: any, options: ServerCreateRoleNameDto) {
    this.roleName = options.rolename;

    const roleCheck = 'owner'; // Only owners can access this command
    const validationError = await validateServerAndRole(interaction, roleCheck, this.serverRepository);
    if (validationError) {
      return validationError; // Reply has already been handled
    }
    const serverId = interaction.guildId;

    const server = await this.serverRepository.getServerById(serverId);

    if (!server) {
      return interaction.reply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!',
        ephemeral: true,
      });
    }
    console.log(53, server);


    const roleSelectionRow = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(

      new StringSelectMenuBuilder()
        .setCustomId('SELECT_MENU_ROLE_TYPE')
        .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£')
        .addOptions([
          { label: 'Admin Role', value: 'admin', description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin' },
          { label: 'User Role', value: 'user', description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User' },
          { label: 'Head Role', value: 'head', description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö head' },
          { label: 'Co Role', value: 'co', description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User' },
        ]),
    );

    await interaction.reply({
      embeds: [
        new EmbedBuilder()
          .setTitle('üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå')
          .setDescription(
            `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:\n\n` +
            `- Admin: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n` +
            `- User: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n` +
            `- Head: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\n` +
            `- Co: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°`,
          )
          .setColor(0x00bfff), // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
      ],
      components: [roleSelectionRow],
      ephemeral: true,
    });
  }
  private async replyStopCreate(interaction) {
    return interaction.reply({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ')
          .setDescription(
            `‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó **Admin** ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n` +
            `‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`/server-update-role\``,
          )
          .setColor(0xffa500), // ‡∏™‡∏µ‡∏™‡πâ‡∏°
      ],
      ephemeral: true, // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    });
  }

  @StringSelect('SELECT_MENU_ROLE_TYPE')
  public async handleRoleRegistration(@Context() [interaction]: StringSelectContext) {

    const serverId = interaction.guildId;
    const serverDB = await this.serverRepository.getServerById(serverId);

    const newRole = await interaction.guild.roles.create({ name: this.roleName });
    const isAdmin = interaction.values[0] === "admin";
    const isUser = interaction.values[0] === "user";
    const isHead = interaction.values[0] === "head";
    console.log(69, newRole.guild.id);
    console.log(69, newRole.id);
    if (isAdmin) {
      if (serverDB.adminRoleId) {
        return this.replyStopCreate(interaction);
      }
      try {

        await this.serverRepository.updateServer(newRole.guild.id, {
          adminRoleId: newRole.id
        });
        return this.replySuccess(interaction);
      } catch (error) {
        return this.replyError(interaction);

      }
    } else if (isUser) {
      if (serverDB.userRoleId) {
        return this.replyStopCreate(interaction);
      }
      try {
        await this.serverRepository.updateServer(newRole.guild.id, {
          userRoleId: newRole.id
        });
        return this.replySuccess(interaction);
      } catch (error) {
        return this.replyError(interaction);
      }
    } else if (isHead) {
      if (serverDB.guildHeadRoleId) {
        return this.replyStopCreate(interaction);
      }
      try {
        await this.serverRepository.updateServer(newRole.guild.id, {
          guildHeadRoleId: newRole.id
        });
        return this.replySuccess(interaction);
      } catch (error) {
        return this.replyError(interaction);
      }
    } else {
      if (serverDB.guildCoRoleId) {
        return this.replyStopCreate(interaction);
      }
      try {
        await this.serverRepository.updateServer(newRole.guild.id, {
          guildCoRoleId: newRole.id
        });
        return this.replySuccess(interaction);
      } catch (error) {
        return this.replyError(interaction);
      }
    }
  }
  private replyError(interaction) {
    return interaction.reply({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
          .setDescription(
            `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó **${this.roleName}** ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó **${interaction.values[0]}** ‡πÑ‡∏î‡πâ\n` +
            `‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
          )
          .setColor(0xff0000), // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
      ],
      ephemeral: true,
    });
  }

  private replySuccess(interaction) {
    return interaction.reply({
      embeds: [
        new EmbedBuilder()
          .setTitle('‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
          .setDescription(
            `üéâ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó **${this.roleName}** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó **${interaction.values[0]}** ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
          )
          .setColor(0x00ff00), // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
      ],
      ephemeral: true,
    });
  }
}
