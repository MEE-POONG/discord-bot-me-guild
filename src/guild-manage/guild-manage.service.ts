import { Injectable, Logger } from '@nestjs/common';
import { GuildDB, GuildMembers, PrismaClient, UserDB, MeGuildCoinDB } from '@prisma/client';
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  CacheType,
  CategoryChannel,
  ChannelType,
  ChatInputCommandInteraction,
  Client,
  EmbedBuilder,
  Guild,
  GuildMember,
  OverwriteResolvable,
  Role,
  StageChannel,
  TextChannel,
  User,
  UserManager,
  VoiceChannel,
} from 'discord.js';
import { ServerRepository } from 'src/repository/server';
import { Button, ButtonContext, Context } from 'necord';

@Injectable()
export class GuildManageService {
  private readonly logger = new Logger(GuildManageService.name);

  constructor(
    private readonly prisma: PrismaClient,
    private readonly users: UserManager,
    private readonly client: Client,
    private readonly serverRepository: ServerRepository,
  ) { }

  private createDismissButton(): ActionRowBuilder<ButtonBuilder> {
    return new ActionRowBuilder<ButtonBuilder>().setComponents(
      new ButtonBuilder()
        .setCustomId('dismiss_notification')
        .setLabel('‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ')
        .setEmoji('üóëÔ∏è')
        .setStyle(ButtonStyle.Secondary),
    );
  }

  private createProgressBar(current: number, total: number): string {
    const filled = Math.round((current / total) * 10);
    const empty = 10 - filled;
    return '‚ñì'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  async sendProgressUpdateToCreator(
    creatorId: string,
    guildName: string,
    confirmedMembers: string[],
    status: 'progress' | 'completed' | 'failed',
    invitedMembers?: string[],
    reason?: string
  ): Promise<void> {
    try {
      const creator = await this.users.fetch(creatorId);
      if (!creator) return;

      let embed: EmbedBuilder;
      let autoDeleteTime = 5000; // default 5 seconds

      switch (status) {
        case 'completed':
          embed = new EmbedBuilder()
            .setTitle('üéä ‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
            .setDescription(
              `üè∞ **‡∏Å‡∏¥‡∏•‡∏î‡πå "${guildName}" ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß!**\n\n` +
              `üéØ **‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á:**\n${confirmedMembers.map(id => `üëë <@${id}>`).join('\n')}\n\n` +
              `‚ú® **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n` +
              `üéÆ **‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå:** ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`
            )
            .setColor(0x00ff7f)
            .setFooter({ text: 'üåü ‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢' })
            .setTimestamp();
          autoDeleteTime = 20000; // 15 seconds for success
          break;

        case 'progress':
          const totalInvited = invitedMembers?.length || 4;
          const progressBar = this.createProgressBar(confirmedMembers.length, totalInvited);
          const progressPercentage = Math.round((confirmedMembers.length / totalInvited) * 100);

          embed = new EmbedBuilder()
            .setTitle('üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå')
            .setDescription(
              `üè∞ **‡∏Å‡∏¥‡∏•‡∏î‡πå "${guildName}"**\n\n` +
              `${progressBar} **${confirmedMembers.length}/${totalInvited}** (${progressPercentage}%)\n\n` +
              `‚úÖ **‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß:**\n${confirmedMembers.map(id => `üü¢ <@${id}>`).join('\n')}\n\n` +
              `‚è≥ **‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:**\n${invitedMembers?.filter(id => !confirmedMembers.includes(id)).map(id => `üü° <@${id}>`).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n\n` +
              `üí° **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ${totalInvited - confirmedMembers.length} ‡∏Ñ‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠`
            )
            .setColor(0xffa500)
            .setFooter({ text: '‚è∞ ‡∏£‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°' })
            .setTimestamp();
          autoDeleteTime = 10000; // 10 seconds for progress
          break;

        case 'failed':
          embed = new EmbedBuilder()
            .setTitle('‚ùå ‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
            .setDescription(
              `üè∞ **‡∏Å‡∏¥‡∏•‡∏î‡πå "${guildName}"**\n\n` +
              `üíî **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n` +
              `üìù **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:** ${reason || '‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç'}\n\n` +
              `üîÑ **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
              `üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:** ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤`
            )
            .setColor(0xff4444)
            .setFooter({ text: 'üí™ ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ! ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠' })
            .setTimestamp();
          autoDeleteTime = 8000; // 8 seconds for failure
          break;
      }

      const message = await creator.send({
        embeds: [embed],
        components: [this.createDismissButton()]
      });

      // Auto delete notification
      setTimeout(async () => {
        try {
          await message.delete();
        } catch (error) {
          // Message might already be deleted
        }
      }, autoDeleteTime);

    } catch (error) {
      this.logger.error(`Failed to send progress update to creator ${creatorId}:`, error);
    }
  }

  async onModuleInit() {
    this.logger.log('GuildManageService initialized');
  }

  async getGuild(user: User) {
    this.logger.debug(`[getGuild] Starting to get guild for user: ${user.id} (${user.username})`);

    const guildMembers = await this.prisma.guildMembers.findFirst({
      where: { userId: user.id },
    });

    this.logger.debug(`[getGuild] Found guildMembers:`, guildMembers);

    if (!guildMembers) {
      this.logger.debug(`[getGuild] No guild members found for user: ${user.id}`);
      return null;
    }

    const guild = await this.prisma.guildDB.findFirst({
      where: { id: guildMembers.guildId },
    });

    this.logger.debug(`[getGuild] Found guild:`, guild);

    this.logger.debug(`[getGuild] Final guild result:`, guild);
    return guild || null;
  }

  async checkGuild(userData: UserProfile) {
    this.logger.debug(`[checkGuild] Checking guild for user: ${userData.discord_id} (${userData.username})`);
    try {
      const result = await this.prisma.guildMembers.findFirst({
        where: { userId: userData.discord_id },
        include: {
          guildDB: true, // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏î‡πâ‡∏ß‡∏¢
        },
      });
      console.log(70, 'result', result);
      this.logger.debug(71, ` [checkGuild] Query result for user ${userData.discord_id}:`, {
        found: !!result,
        guildId: result?.guildId,
        position: result?.position,
        guildName: result?.guildDB?.guild_name,
      });

      if (result) {
        this.logger.log(`‚úÖ User ${userData.discord_id} already has guild: ${result.guildDB?.guild_name} (${result.guildId})`);
      } else {
        this.logger.log(`‚ùå User ${userData.discord_id} has no guild - can create new one`);
      }

      return result;
    } catch (error) {
      this.logger.error(`[checkGuild] Error checking guild for user ${userData.discord_id}:`, error);
      throw error;
    }
  }

  async cancelInviteCreate(interaction: ButtonInteraction, GuildCreateReportId: string) {
    this.logger.debug(`[cancelInviteCreate] Starting cancel for GuildCreateReportId: ${GuildCreateReportId} by user: ${interaction.user.id}`);
    try {
      const report = await this.prisma.guildCreateReport.findFirst({
        where: { id: GuildCreateReportId },
      });

      this.logger.debug(`[cancelInviteCreate] Found report:`, report);

      if (!report) {
        this.logger.warn(`[cancelInviteCreate] Report not found: ${GuildCreateReportId}`);
        return interaction.reply({
          content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          ephemeral: true,
        });
      }

      this.logger.debug(`[cancelInviteCreate] Deleting message and replying to user`);
      interaction.message.delete().catch(() => { });
      const cancelEmbed = new EmbedBuilder()
        .setTitle('‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏•‡∏î‡πå')
        .setDescription(
          `üéØ **‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏•‡πâ‡∏ß**\n\n` +
          `üí≠ **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:** ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n` +
          `üì® **‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n` +
          `üí´ **‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì:** ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤`
        )
        .setColor(0xff6b6b)
        .setFooter({ text: 'üí® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ' })
        .setTimestamp();

      const cancelReply = await interaction.reply({
        embeds: [cancelEmbed],
        components: [this.createDismissButton()],
        ephemeral: true,
      });

      // Auto delete after 3 seconds (general process notification)
      setTimeout(async () => {
        try {
          await interaction.deleteReply();
        } catch (error) {
          // Message might already be deleted
        }
      }, 3000);

      if ('ownerId' in report && 'guildName' in report) {
        this.logger.debug(`[cancelInviteCreate] Notifying owner: ${report.ownerId} about cancellation`);

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        await this.sendProgressUpdateToCreator(
          report.ownerId,
          report.guildName,
          [],
          'failed',
          report.invitedMembers,
          `<@${interaction.user.id}> ‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç`
        );

        this.logger.debug(`[cancelInviteCreate] Deleting report from database`);
        await this.prisma.guildCreateReport
          .delete({
            where: { id: GuildCreateReportId },
          })
          .catch(() => { });
      }
    } catch (error) {
      this.logger.error(`[cancelInviteCreate] Error during cancellation:`, error);
      interaction.message.delete().catch(() => { });
      const errorEmbed = new EmbedBuilder()
        .setTitle('‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏•‡∏î‡πå')
        .setDescription(
          `üéØ **‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏•‡πâ‡∏ß**\n\n` +
          `üí≠ **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:** ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n` +
          `üì® **‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n` +
          `üí´ **‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì:** ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤`
        )
        .setColor(0xff6b6b)
        .setFooter({ text: 'üí® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ' })
        .setTimestamp();

      const errorReply = await interaction.reply({
        embeds: [errorEmbed],
        components: [this.createDismissButton()],
        ephemeral: true,
      });

      // Auto delete after 3 seconds (general process notification)
      setTimeout(async () => {
        try {
          await interaction.deleteReply();
        } catch (error) {
          // Message might already be deleted
        }
      }, 3000);
    }
  }

  async acceptInviteCreate(interaction: ButtonInteraction, GuildCreateReportId: string) {
    this.logger.debug(`128 [acceptInviteCreate] Starting accept for GuildCreateReportId: ${GuildCreateReportId} by user: ${interaction.user.id} `);
    try {
      await interaction.deferReply({ ephemeral: true });
      console.log(131);

      const report = await this.prisma.guildCreateReport.findFirst({
        where: { id: GuildCreateReportId },
      });
      console.log(136);

      this.logger.debug(`[acceptInviteCreate] Found report:`, report);
      console.log(139);

      if (!report) {
        this.logger.warn(`[acceptInviteCreate] Report not found: ${GuildCreateReportId}`);
        return interaction.editReply({
          content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö',
        });
      }
      console.log(147);

      if (report.confirmedMembers.length >= 1) {
        this.logger.debug(`[acceptInviteCreate] Creating guild with ${report.confirmedMembers.length} confirmed members`);
        const membersList = [...report.confirmedMembers, interaction.user.id];
        this.logger.debug(`[acceptInviteCreate] Members list:`, membersList);
        console.log(153);
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Discord guild ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ category ID
        this.logger.debug(155, `[acceptInviteCreate] Creating Discord guild first to get category ID for: ${report.guildName}`);
        const res = await this.createGuild(report.guildName, report.serverId);
        this.logger.debug(157, `[acceptInviteCreate] Create guild result:`, res);
        console.log(158);

        if (!res.role || res.message !== 'success') {
          this.logger.error(`[acceptInviteCreate] Failed to create Discord guild: ${res.message}`);

          // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
          await this.sendProgressUpdateToCreator(
            report.ownerId,
            report.guildName,
            [],
            'failed',
            report.invitedMembers,
            `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ: ${res.message}`
          );

          return interaction.editReply({
            content: `‡∏Å‡∏¥‡∏•‡∏î‡πå ${report.guildName} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà ${res.message}`,
          });
        }

        // ‡πÄ‡∏Å‡πá‡∏ö category ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        const categoryId = res.categoryId;
        this.logger.debug(`[acceptInviteCreate] Category ID: ${categoryId}`);

        const guild = await this.prisma.guildDB.create({
          data: {
            guild_name: report.guildName,
            guild_roleId: res.role.id,
            guild_size: 10,
            guild_level: 1,
            guild_copper: 0,
            guild_leader: report.ownerId,
            Logo: '',
            guild_categoryId: categoryId, // ‡πÄ‡∏Å‡πá‡∏ö Discord category ID
          },
        });
        console.log(180);
        this.logger.debug(181, ` [acceptInviteCreate] Created guild:`, guild);

        if (!guild) {
          this.logger.error(`[acceptInviteCreate] Failed to create guild for report: ${GuildCreateReportId}`);

          // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
          await this.sendProgressUpdateToCreator(
            report.ownerId,
            report.guildName,
            [],
            'failed',
            report.invitedMembers,
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
          );

          return interaction.editReply({
            content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà',
          });
        }
        console.log(190);
        this.logger.debug(191, `[acceptInviteCreate] Creating guild members for guild: ${guild.id}`);
        const members = await this.prisma.guildMembers.createMany({
          data: membersList.map((userId) => ({
            userId,
            position: userId === report.ownerId ? 'Leader' : 'Co-founder',
            guildId: guild.id,
          })),
        });
        console.log(195);
        this.logger.debug(196, `[acceptInviteCreate] Created ${members.count} guild members`);

        if (!members.count) {
          this.logger.error(`[acceptInviteCreate] Failed to create guild members for guild: ${guild.id}`);

          // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
          await this.sendProgressUpdateToCreator(
            report.ownerId,
            report.guildName,
            [],
            'failed',
            report.invitedMembers,
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ'
          );

          await this.deleteData(guild);
          return interaction.editReply({
            content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ',
          });
        }
        console.log(210);
        this.logger.debug(213, `[acceptInviteCreate] Replying success to user`);
        const successEmbed = new EmbedBuilder()
          .setTitle('üéä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
          .setDescription(
            `üè∞ **‡∏Å‡∏¥‡∏•‡∏î‡πå "${report.guildName}" ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß!**\n\n` +
            `üéØ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:** ‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå\n` +
            `üíé **‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©:** ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏•‡πâ‡∏ß\n` +
            `üéÆ **‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå:** ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n` +
            `üëë **‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:** ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!\n\n` +
            `‚ú® **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:** ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`
          )
          .setColor(0x00ff7f)
          .setFooter({ text: 'üåü ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå!' })
          .setTimestamp()
          .setThumbnail('https://media.discordapp.net/attachments/861491684214833182/1224408324922015876/DALLE_2024-04-02_00.21.20_-_A_vibrant_watercolor_of_an_elven_archer_a_human_mage_and_a_dwarf_warrior_standing_triumphantly_atop_a_hill_looking_towards_the_horizon_at_dawn._The.webp?ex=661d621d&is=660aed1d&hm=29e373d7dea2b16ceddf3e45271ca343bf01c5e5b2bbfc1ee263503f04900ca7&=&format=webp&width=839&height=479');

        await interaction.editReply({
          embeds: [successEmbed],
          components: [this.createDismissButton()],
        });

        // Auto delete after 10 seconds (success notification with extensive content)
        setTimeout(async () => {
          try {
            await interaction.deleteReply();
          } catch (error) {
            // Message might already be deleted
          }
        }, 20000);
        console.log(214);
        this.logger.debug(217, `[acceptInviteCreate] Fetching Discord guild: ${report.serverId}`);
        const Interguild = await this.client.guilds.fetch(report.serverId);
        if (!Interguild) {
          this.logger.error(`[acceptInviteCreate] Failed to fetch Discord guild: ${report.serverId}`);
          return interaction.editReply({
            content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡∏¥‡∏™‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ',
          });
        }
        console.log(225);
        this.logger.debug(228, `[acceptInviteCreate] Fetching server data for role IDs`);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ guildHeadRoleId ‡πÅ‡∏•‡∏∞ guildCoRoleId
        const serverData = await this.serverRepository.getServerById(report.serverId);
        if (!serverData) {
          this.logger.error(`[acceptInviteCreate] Server data not found for: ${report.serverId}`);
          return interaction.editReply({
            content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Guild Room ‡∏Å‡πà‡∏≠‡∏ô',
          });
        }

        this.logger.debug(230, `[acceptInviteCreate] Fetching owner: ${report.ownerId}`);
        const owner = await Interguild.members.fetch(report.ownerId);
        console.log(230);
        this.logger.debug(231, `[acceptInviteCreate] Adding roles to owner: ${report.ownerId}`);

        // ‡πÉ‡∏ä‡πâ guildHeadRoleId ‡πÅ‡∏ó‡∏ô environment variable
        if (serverData.guildHeadRoleId) {
          owner?.roles.add(serverData.guildHeadRoleId).catch((error) => {
            this.logger.error('Failed to add guild head role to owner', error);
          });
        } else {
          this.logger.warn('guildHeadRoleId not found in server data');
        }
        owner?.roles.add(res.role).catch((error) => {
          this.logger.error('Failed to add guild role to owner', error);
        });
        console.log(235);
        const coFounders = membersList.filter((id) => id !== report.ownerId);
        this.logger.debug(238, `[acceptInviteCreate] Processing ${coFounders.length} co-founders:`, coFounders);
        console.log(238);
        for (const id of coFounders) {
          this.logger.debug(241, `[acceptInviteCreate] Processing co-founder: ${id}`);
          const member = await Interguild.members.fetch(id);
          if (member) {
            // ‡πÉ‡∏ä‡πâ guildCoRoleId ‡πÅ‡∏ó‡∏ô environment variable
            if (serverData.guildCoRoleId) {
              member.roles.add(serverData.guildCoRoleId).catch((error) => {
                this.logger.error(`Failed to add guild co-role to member ${id}`, error);
              });
            } else {
              this.logger.warn('guildCoRoleId not found in server data');
            }
            member.roles.add(res.role).catch((error) => {
              this.logger.error(`Failed to add guild role to member ${id}`, error);
            });
          } else {
            this.logger.warn(`[acceptInviteCreate] Could not fetch member: ${id}`);
          }
        }
        console.log(283);
        this.logger.debug(263, ` [acceptInviteCreate] Updating message and cleaning up`);
        this.updateMessage(report.channelId, report.messageId, report.guildName, membersList);

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await this.sendProgressUpdateToCreator(report.ownerId, report.guildName, membersList, 'completed');

        console.log(286);
        await this.prisma.guildCreateReport.delete({ where: { id: GuildCreateReportId } }).catch(() => { });
        console.log(287);
        interaction.message.delete().catch(() => {
          this.logger.error('Failed to delete interaction message');
        });
      } else {
        this.logger.debug(274, ` [acceptInviteCreate] Adding user to confirmed members (not enough members yet)`);
        await this.prisma.guildCreateReport.update({
          data: { confirmedMembers: { push: interaction.user.id } },
          where: { id: GuildCreateReportId },
        });
        console.log(298);
        this.logger.debug(299, ` [acceptInviteCreate] Replying success and updating message`);
        const remainingCount = report.invitedMembers.length - (report.confirmedMembers.length + 1);
        const confirmEmbed = new EmbedBuilder()
          .setTitle('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
          .setDescription(
            `üéØ **‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå "${report.guildName}" ‡πÅ‡∏•‡πâ‡∏ß**\n\n` +
            `üìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**\n` +
            `‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: **${report.confirmedMembers.length + 1}** ‡∏Ñ‡∏ô\n` +
            `‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: **${remainingCount}** ‡∏Ñ‡∏ô\n\n` +
            `üéÆ **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:** ‡∏£‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°\n` +
            `üè∞ **‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:** ‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!\n\n` +
            `üí° **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`
          )
          .setColor(0x4caf50)
          .setFooter({ text: '‚è∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à...' })
          .setTimestamp();

        await interaction.editReply({
          embeds: [confirmEmbed],
          components: [this.createDismissButton()],
        });

        // Auto delete after 7 seconds (progress notification with moderate content)
        setTimeout(async () => {
          try {
            await interaction.deleteReply();
          } catch (error) {
            // Message might already be deleted
          }
        }, 7000);
        interaction.message.delete().catch(() => {
          this.logger.error('Failed to delete interaction message');
        });
        console.log(306);
        this.updateMessage(report.channelId, report.messageId, report.guildName, [
          ...report.confirmedMembers,
          interaction.user.id,
        ]);

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        const updatedMembers = [...report.confirmedMembers, interaction.user.id];
        await this.sendProgressUpdateToCreator(report.ownerId, report.guildName, updatedMembers, 'progress', report.invitedMembers);

        console.log(311);
      }
    } catch (error) {
      this.logger.error('Error in acceptInviteCreate', error);

      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
      try {
        const report = await this.prisma.guildCreateReport.findFirst({
          where: { id: GuildCreateReportId }
        });

        if (report) {
          await this.sendProgressUpdateToCreator(
            report.ownerId,
            report.guildName,
            [],
            'failed',
            report.invitedMembers,
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå'
          );
        }
      } catch (notifyError) {
        this.logger.error('Error notifying creator of failure', notifyError);
      }

      interaction.editReply({
        content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      });
    }
  }

  async deleteData(guildDB: GuildDB) {
    this.logger.debug(`[deleteData] Starting cleanup for guild: ${guildDB.id} (${guildDB.guild_name})`);
    await this.prisma.guildDB.delete({ where: { id: guildDB.id } }).catch(() => {
      this.logger.error(`Failed to delete guild: ${guildDB.id}`);
    });
    await this.prisma.guildMembers.deleteMany({ where: { guildId: guildDB.id } }).catch(() => {
      this.logger.error(`Failed to delete guild members for guild: ${guildDB.id}`);
    });
    this.logger.debug(`[deleteData] Cleanup completed for guild: ${guildDB.id}`);
  }

  async updateMessage(channelId: string, messageId: string, guildName: string, members: string[]) {
    this.logger.debug(`[updateMessage] Updating message for guild: ${guildName} with ${members.length} members`);
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ channelId ‡πÅ‡∏•‡∏∞ messageId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!channelId || !messageId) {
        this.logger.warn(`[updateMessage] Missing channelId or messageId: channelId=${channelId}, messageId=${messageId}`);
        return;
      }

      const channel = (await this.client.channels.fetch(channelId).catch((error) => {
        this.logger.warn(`[updateMessage] Failed to fetch channel ${channelId}:`, error.message);
        return null;
      })) as TextChannel | VoiceChannel;

      if (!channel) {
        this.logger.warn(`[updateMessage] Channel not found: ${channelId}`);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ channel ‡πÄ‡∏õ‡πá‡∏ô text channel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!channel.isTextBased()) {
        this.logger.warn(`[updateMessage] Channel is not text-based: ${channelId}`);
        return;
      }

      const message = await channel.messages.fetch(messageId).catch((error) => {
        if (error.code === 10008) {
          this.logger.warn(`[updateMessage] Message ${messageId} not found - it may have been deleted or expired`);
        } else {
          this.logger.warn(`[updateMessage] Failed to fetch message ${messageId}:`, error.message);
        }
        return null;
      });

      if (!message) {
        this.logger.warn(`[updateMessage] Message not found: ${messageId}`);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ message ‡∏°‡∏µ embed ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!message.embeds || message.embeds.length === 0) {
        this.logger.warn(`[updateMessage] Message has no embeds: ${messageId}`);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bot ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô message ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (message.author.id !== this.client.user?.id) {
        this.logger.warn(`[updateMessage] Cannot edit message ${messageId} - not authored by bot`);
        return;
      }

      // Get the original guild report to determine total invited
      const report = await this.prisma.guildCreateReport.findFirst({
        where: { messageId: messageId }
      });

      const totalInvited = report ? report.invitedMembers.length : 4;
      const confirmedCount = members.length;

      const embed = new EmbedBuilder(message.embeds[0].toJSON());
      if (confirmedCount >= totalInvited) {
        this.logger.debug(`[updateMessage] Guild ${guildName} is complete with ${confirmedCount} members`);
        embed
          .setDescription(`# üéâ ‡∏Å‡∏¥‡∏•‡∏î‡πå ${guildName} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`)
          .setColor('Gold');
      } else {
        this.logger.debug(`[updateMessage] Guild ${guildName} progress: ${confirmedCount}/${totalInvited}`);

        const progressBar = this.createProgressBar(confirmedCount, totalInvited);
        const progressPercentage = Math.round((confirmedCount / totalInvited) * 100);

        let invitedList = '';
        if (report && report.invitedMembers.length > 0) {
          invitedList = '\n\nüéØ **‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ä‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á:**\n';
          report.invitedMembers.forEach((userId, index) => {
            const status = index < confirmedCount ? '‚úÖ' : '‚è≥';
            invitedList += `${status} ${index + 1}. <@${userId}>\n`;
          });
          invitedList += '\n‚è∞ **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ**';
        }

        embed.setTitle(`üè∞ ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå "${guildName}"`)
          .setDescription(
            // `${progressBar} **${confirmedCount}/${totalInvited}** (${progressPercentage}%)\n\n` +
            `üìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**\n` +
            `‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: **${confirmedCount}** ‡∏Ñ‡∏ô\n` +
            `‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: **${totalInvited - confirmedCount}** ‡∏Ñ‡∏ô${invitedList}`
          )
          .setColor(confirmedCount === totalInvited ? 0x00ff00 : 0xffa500)
          .setFooter({
            text: `üéÆ ‡∏Å‡∏¥‡∏•‡∏î‡πå ${guildName} ‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å`,
            iconURL: 'https://cdn.discordapp.com/emojis/1234567890123456789.png'
          })
          .setTimestamp();
      }
      // ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      await message.edit({ embeds: [embed] }).catch((error) => {
        if (error.code === 10008) {
          this.logger.warn(`[updateMessage] Message ${messageId} not found - it may have been deleted`);
        } else {
          this.logger.error(`[updateMessage] Failed to edit message ${messageId}:`, error.message);
        }
      });
      setTimeout(async () => {
        await message.delete().catch((error) => {
          this.logger.warn(`[updateMessage] Failed to delete message ${messageId}:`, error.message);
        });
      }, 15000);
    } catch (error) {
      this.logger.error(`[updateMessage] Failed to update message for guild ${guildName}:`, error);
    }
  }

  async createGuild(
    guildName: string,
    guildId: string,
  ): Promise<{ role: Role | undefined; message: string; categoryId?: string }> {
    this.logger.debug(`[createGuild] Starting guild creation for: ${guildName}`);

    const guildServer = await this.client.guilds
      .fetch(guildId)
      .catch((error) => {
        this.logger.error('Failed to fetch guild:', error);
        return undefined;
      });

    if (!guildServer) {
      this.logger.error(`[createGuild] Failed to fetch Discord guild: ${guildId}`);
      return { role: undefined, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡∏¥‡∏™‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ', categoryId: undefined };
    }

    this.logger.debug(`[createGuild] Successfully fetched Discord guild: ${guildServer.name}`);

    this.logger.log('guildServer', guildServer);
    try {
      console.log(386, ' guildServer', guildServer);
      console.log(387, ' guildName', guildName);

      this.logger.debug(388, `[createGuild] Creating role for guild: ${guildName}`);
      const role = await guildServer.roles.create({
        name: `üïç ${guildName}`,
        position: 1,
        color: '#A4F1FF',
      });

      this.logger.debug(395, ` [createGuild] Created role: ${role.name} (${role.id}) ${guildServer.id}`);
      this.logger.debug(396, `[createGuild] Creating channels for guild: ${role.name}`);

      const channelResult = await this.createChannel(role, guildServer.id);
      this.logger.log(399, 'role', role);
      this.logger.log(400, 'channelResult', channelResult);

      this.logger.debug(405, `[createGuild] Guild creation completed for: ${guildName}`);
      return { role, message: channelResult.message, categoryId: channelResult.categoryId };
    } catch (error) {
      this.logger.error('Error creating guild room', error);
      return { role: undefined, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ', categoryId: undefined };
    }
  }
  private async createPrivateVoiceChannel(
    category: CategoryChannel,
    name: string,
    state: 0 | 1 | 2 = 0,       // 0 = Voice, 1 = Stage, 2 = Text
    server?: any,               // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ type ‡∏Ç‡∏≠‡∏á ServerDB ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÅ‡∏ó‡∏ô any
    guildServer?: Guild,
    roles?: Role                // Guild role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö permission
  ) {
    this.logger.debug(`[createVoiceChannel] Creating channel: ${name} (state: ${state}, category: ${category.id}`);
    try {
      const type =
        state === 0
          ? ChannelType.GuildVoice
          : state === 1
            ? ChannelType.GuildStageVoice
            : ChannelType.GuildText;

      const permissionOverwrites = [
        // @everyone - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        {
          id: guildServer!.roles.everyone.id,
          deny: ['ViewChannel'],
        },
        // üé≠ ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        ...(server?.eccentricRoleId ? [{
          id: server.eccentricRoleId,
          deny: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // ‚öîÔ∏è ‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        ...(server?.adventurerRoleId ? [{
          id: server.adventurerRoleId,
          deny: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏° - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        ...(server?.visitorRoleId ? [{
          id: server.visitorRoleId,
          deny: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // üïç ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏•‡∏î‡πå - ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏¥‡∏•‡∏î‡πå)
        ...(roles ? [{
          id: roles.id, // Guild role ID
          allow: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
      ];

      const ch = await category.children.create({
        type,
        name,
        permissionOverwrites: permissionOverwrites as OverwriteResolvable[],
      });

      this.logger.debug(`[createVoiceChannel] Created: ${ch.name} (${ch.id})`);
      return ch;
    } catch (error) {
      this.logger.error(`[createVoiceChannel] Failed to create channel "${name}":`, error);
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ${name} ‡πÑ‡∏î‡πâ`);
    }
  }

  private async createPublicVoiceChannel(
    category: CategoryChannel,
    name: string,
    state: 0 | 1 | 2 = 0,       // 0 = Voice, 1 = Stage, 2 = Text
    server?: any,               // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ type ‡∏Ç‡∏≠‡∏á ServerDB ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÅ‡∏ó‡∏ô any
    guildServer?: Guild,
    roles?: Role                // Guild role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö permission
  ) {
    this.logger.debug(`[createVoiceChannel] Creating channel: ${name} (state: ${state}, category: ${category.id}`);
    try {
      const type =
        state === 0
          ? ChannelType.GuildVoice
          : state === 1
            ? ChannelType.GuildStageVoice
            : ChannelType.GuildText;

      const permissionOverwrites = [
        // @everyone - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        {
          id: guildServer!.roles.everyone.id,
          allow: ['ViewChannel'],
        },
        // üé≠ ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        ...(server?.eccentricRoleId ? [{
          id: server.eccentricRoleId,
          deny: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // ‚öîÔ∏è ‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        ...(server?.adventurerRoleId ? [{
          id: server.adventurerRoleId,
          deny: ['Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏° - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        ...(server?.visitorRoleId ? [{
          id: server.visitorRoleId,
          deny: ['Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // üïç ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏•‡∏î‡πå - ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏¥‡∏•‡∏î‡πå)
        ...(roles ? [{
          id: roles.id, // Guild role ID
          allow: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
      ];

      const ch = await category.children.create({
        type,
        name,
        permissionOverwrites: permissionOverwrites as OverwriteResolvable[],
      });

      this.logger.debug(`[createVoiceChannel] Created: ${ch.name} (${ch.id})`);
      return ch;
    } catch (error) {
      this.logger.error(`[createVoiceChannel] Failed to create channel "${name}":`, error);
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ${name} ‡πÑ‡∏î‡πâ`);
    }
  }
  private async createGiftHouseChannel(roles: Role, guildId: string): Promise<void> {
    this.logger.debug(`[createGiftHouseChannel] Creating gift house channel for category: ${guildId}`);
    try {
      const guildServer = await this.client.guilds.fetch(guildId);
      if (!guildServer) {
        this.logger.error('Failed to fetch guild');
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ role IDs
      const server = await this.serverRepository.getServerById(guildId);
      if (!server) {
        this.logger.error('Failed to fetch server data for gift house channel');
        return;
      }

      console.log(463, 'roles : ', roles.id);
      console.log(464, 'guildId : ', guildId);

      const permissionOverwrites = [
        // @everyone - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
        {
          id: guildServer.roles.everyone.id,
          deny: ['ViewChannel'],
        },
        // üé≠ ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå - ‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Guild ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        ...(server.eccentricRoleId ? [{
          id: server.eccentricRoleId,
          deny: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // üïç ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏•‡∏î‡πå - ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Guild)
        {
          id: roles.id,
          allow: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        },
        // ‚öîÔ∏è ‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ - ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
        ...(server.adventurerRoleId ? [{
          id: server.adventurerRoleId,
          allow: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
        // üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏° - ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
        ...(server.visitorRoleId ? [{
          id: server.visitorRoleId,
          allow: ['ViewChannel', 'Connect', 'SendMessages', 'ReadMessageHistory'],
        }] : []),
      ];

      const channel = await guildServer.channels.create({
        name: `üéÅ„Éª‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô`,
        type: ChannelType.GuildVoice,
        parent: guildId,
        permissionOverwrites: permissionOverwrites as OverwriteResolvable[],
      });

      this.logger.debug(`[createGiftHouseChannel] Created gift house channel: ${channel.name} (${channel.id})`);
    } catch (error) {
      this.logger.error('Failed to create gift house channel:', error);
    }
  }

  private async createGuildEventChannel(roles: Role, guildId: string): Promise<void> {
    this.logger.debug(`[createGuildEventChannel] Creating guild event channel for category: ${guildId}`);
    try {
      const guildServer = await this.client.guilds.fetch(guildId);
      if (!guildServer) {
        this.logger.error('Failed to fetch guild');
        return;
      }

      const channel = await guildServer.channels.create({
        name: `üëë„Éª‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏¥‡∏•‡∏î‡πå`,
        type: ChannelType.GuildStageVoice,
        parent: guildId,
        permissionOverwrites: [
          {
            id: roles.id,
            allow: ['Connect', 'ViewChannel'],
          },
        ],
      });

      this.logger.debug(`[createGuildEventChannel] Created guild event channel: ${channel.name} (${channel.id})`);
    } catch (error) {
      this.logger.error('Failed to create guild event channel:', error);
    }
  }

  private async createChannel(roles: Role, guildId: string): Promise<{ message: string; categoryId?: string }> {
    this.logger.debug(`[createChannel] Starting channel creation for role: ${roles.name} (${roles.id})`);
    try {
      const guildServer = await this.client.guilds.fetch(guildId);
      if (!guildServer) {
        this.logger.error('Failed to fetch guild');
        return { message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡∏¥‡∏™‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ', categoryId: undefined };
      }

      this.logger.debug(`[createChannel] Fetching server data for: ${guildServer.id}`);
      const server = await this.serverRepository.getServerById(guildServer.id);
      if (!server) {
        this.logger.error('Failed to fetch server');
        return { message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡∏¥‡∏™‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ', categoryId: undefined };
      }

      // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå
      this.logger.debug(`[createChannel] Getting position guild from register channel: ${server.registerChannel}`);
      const positionGuild = guildServer.channels.cache.get(
        server.registerChannel,
      ) as CategoryChannel;

      this.logger.debug(`[createChannel] Creating category: ${roles.name}`);
      const category = await guildServer.channels.create({
        name: roles.name,
        type: ChannelType.GuildCategory,
        ...(positionGuild ? { position: positionGuild.position + 1 } : {}),
        permissionOverwrites: [
          {
            id: guildServer!.roles.everyone.id,
            allow: ['ViewChannel'],
          },
          {
            id: guildId,
            allow: ['ViewChannel'],
            deny: ['Connect'],
          },
          {
            id: roles.id,
            allow: ['ViewChannel', 'Connect'],
          },
        ],
      });

      if (!category) {
        this.logger.error('Failed to create guild category');
        return { message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ', categoryId: undefined };
      }

      this.logger.debug(`[createChannel] Created category: ${category.name} (${category.id})`);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô
      this.logger.debug(`[createChannel] Creating all channels for guild`);
      await Promise.all([
        this.createPrivateVoiceChannel(category, 'üí¨„Éª‡πÅ‡∏ä‡∏ó', 2, server, guildServer, roles),
        this.createPrivateVoiceChannel(category, 'üé§„Éª‡πÇ‡∏ñ‡∏á‡∏´‡∏•‡∏±‡∏Å', 0, server, guildServer, roles),
        this.createPrivateVoiceChannel(category, 'üé§„Éª‡πÇ‡∏ñ‡∏á‡∏£‡∏≠‡∏á', 0, server, guildServer, roles),
        this.createPublicVoiceChannel(category, 'üëë„Éª‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', 0, server, guildServer, roles),
        this.createPublicVoiceChannel(category, 'üéÅ„Éª‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô', 0, server, guildServer, roles),
        // ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á public ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô publicView = true
        // this.createVoiceChannel(category, 'üì£„Éª‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå', 2, true, server, guildServer, roles),
      ]);

      this.logger.debug(`[createChannel] All channels created successfully for role: ${roles.name}`);
      return { message: 'success', categoryId: category.id };
    } catch (error: any) {
      this.logger.error('Error in createChannel:', error);
      return { message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á', categoryId: undefined };
    }
  }

  @Button('dismiss_notification')
  async dismissNotification(@Context() [interaction]: ButtonContext): Promise<void> {
    const dismissEmbed = new EmbedBuilder()
      .setTitle('üóëÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß')
      .setDescription(
        `‚úÖ **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß**\n\n` +
        `üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ\n` +
        `üîÑ **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`
      )
      .setColor(0x95a5a6)
      .setFooter({ text: 'üí´ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' })
      .setTimestamp();

    await interaction.update({
      embeds: [dismissEmbed],
      components: [],
    });

    // Auto delete after 3 minutes
    setTimeout(async () => {
      try {
        await interaction.deleteReply();
      } catch (error) {
        // Message might already be deleted
      }
    }, 3 * 60 * 1000);
  }

}

export interface UserProfile extends UserDB {
  GuildMembers: GuildMembers[];
  meGuildCoinDB: MeGuildCoinDB | null;
}
