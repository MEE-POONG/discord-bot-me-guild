import { Injectable, Logger } from '@nestjs/common';
import { Context, ContextOf, On, Once } from 'necord';
import { SlashCommand, SlashCommandContext } from 'necord';
import { EmbedBuilder } from 'discord.js';
import { ServerRepository } from './repository/server';

@Injectable()
export class AppService {
  private readonly logger = new Logger(AppService.name);

  constructor(
    private readonly serverRepository: ServerRepository,
  ) {}

  @Once('ready')
  public onReady(@Context() [client]: ContextOf<'ready'>) {
    this.logger.log(`app.service Bot logged in as ${client.user.username}`);
  }

  @On('warn')
  public onWarn(@Context() [message]: ContextOf<'warn'>) {
    this.logger.warn(message);
  }

  @On('messageCreate')
  public onMessageCreate(@Context() [message]: ContextOf<'messageCreate'>) {
    this.logger.log(message.content);
  }

  @SlashCommand({
    name: 'ping',
    description: 'Ping command!',
  })
  public async onPing(@Context() [interaction]: SlashCommandContext) {
    return interaction.reply({ content: 'Pong JS NestJS !' });
  }

  @SlashCommand({
    name: 'remove',
    description: '‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ',
  })
  public async onRemove(@Context() [interaction]: SlashCommandContext) {
    const guildId = interaction.guildId;
    if (!guildId) {
      return interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Guild ID', ephemeral: true });
    }

    // ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Guild Commands
    await interaction.client.application.commands.set([], guildId);

    return interaction.reply({
      content: '‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!',
      ephemeral: true,
    });
  }

  @SlashCommand({
    name: 'health',
    description: '‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
  })
  public async onHealth(@Context() [interaction]: SlashCommandContext) {
    try {
      await interaction.deferReply({ ephemeral: true });

      const commands = await interaction.client.application.commands.fetch();
      const guildCommands = await interaction.guild?.commands.fetch();

      const allCommands = new Map();

      // ‡∏£‡∏ß‡∏° Global Commands
      commands.forEach((command) => {
        allCommands.set(command.name, {
          name: command.name,
          description: command.description,
          type: 'Global',
          options: command.options || [],
        });
      });

      // ‡∏£‡∏ß‡∏° Guild Commands
      guildCommands?.forEach((command) => {
        allCommands.set(command.name, {
          name: command.name,
          description: command.description,
          type: 'Guild',
          options: command.options || [],
        });
      });

      const embed = new EmbedBuilder()
        .setTitle('üè• ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Discord Bot')
        .setDescription(
          `**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allCommands.size}**\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:`,
        )
        .setColor('#00ff00')
        .setTimestamp()
        .setFooter({
          text: `Bot: ${interaction.client.user?.username} | Server: ${interaction.guild?.name}`,
          iconURL: interaction.client.user?.displayAvatarURL(),
        });

      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      const commandCategories = {
        'üõ†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£': [
          'server-register',
          'server-create-role',
          'server-update-role',
          'server-clear',
          'server-clear-role',
          'server-set-room',
          'server-try-it-on',
        ],
        'üéÆ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏°': ['game-create-room', 'game-join', 'game-rank', 'game-type', 'form-game'],
        'üë• ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏¥‡∏•‡∏î‡πå': ['guild-create', 'guild-invite', 'guild-kick', 'guild-manage'],
        'üìù ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô': ['form-register', 'prototype'],
        'üé§ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á': [
          'voice-time',
          'voice-time-range',
          'voice-time-channel',
          'stage-channel',
          'busking',
        ],
        'üí∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô': ['donate'],
        'üì∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£': ['blog-update', 'news-latest'],
        'üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô': [
          'ping',
          'remove',
          'health',
          'test-welcome',
          'check-expiry',
          'notify-admin',
        ],
      };

      let fieldCount = 0;
      const maxFields = 25; // Discord embed limit

      for (const [category, commandNames] of Object.entries(commandCategories)) {
        if (fieldCount >= maxFields) break;

        const categoryCommands = [];
        for (const commandName of commandNames) {
          const command = allCommands.get(commandName);
          if (command) {
            const optionsText =
              command.options.length > 0
                ? `\n‚îî ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${command.options.map((opt) => `\`${opt.name}\``).join(', ')}`
                : '';
            categoryCommands.push(`**/${command.name}** - ${command.description}${optionsText}`);
          }
        }

        if (categoryCommands.length > 0) {
          embed.addFields({
            name: category,
            value: categoryCommands.join('\n'),
            inline: false,
          });
          fieldCount++;
        }
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      const categorizedCommands = Object.values(commandCategories).flat();
      const uncategorizedCommands = Array.from(allCommands.values()).filter(
        (cmd) => !categorizedCommands.includes(cmd.name),
      );

      if (uncategorizedCommands.length > 0 && fieldCount < maxFields) {
        const uncategorizedList = uncategorizedCommands.map((cmd) => {
          const optionsText =
            cmd.options.length > 0
              ? `\n‚îî ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${cmd.options.map((opt) => `\`${opt.name}\``).join(', ')}`
              : '';
          return `**/${cmd.name}** - ${cmd.description}${optionsText}`;
        });

        embed.addFields({
          name: 'üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
          value: uncategorizedList.join('\n'),
          inline: false,
        });
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
      const statsEmbed = new EmbedBuilder()
        .setTitle('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö')
        .setColor('#0099ff')
        .addFields(
          { name: 'ü§ñ Bot Status', value: 'üü¢ Online', inline: true },
          { name: 'üì° Ping', value: `${interaction.client.ws.ping}ms`, inline: true },
          { name: 'üè† Servers', value: `${interaction.client.guilds.cache.size}`, inline: true },
          { name: 'üë• Users', value: `${interaction.client.users.cache.size}`, inline: true },
          { name: '‚ö° Uptime', value: this.formatUptime(interaction.client.uptime), inline: true },
          {
            name: 'üíæ Memory',
            value: `${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB`,
            inline: true,
          },
        )
        .setTimestamp();

      await interaction.editReply({
        embeds: [embed, statsEmbed],
        content: '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!',
      });
    } catch (error) {
      this.logger.error('Health command error:', error);
      await interaction.editReply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      });
    }
  }

  @SlashCommand({
    name: 'check-expiry',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ',
  })
  public async onCheckExpiry(@Context() [interaction]: SlashCommandContext) {
    try {
      await interaction.deferReply({ ephemeral: true });

      const guild = interaction.guild;
      if (!guild) {
        return interaction.editReply({
          content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ',
        });
      }

      const server = await this.serverRepository.getServerById(guild.id);
      if (!server) {
        return interaction.editReply({
          content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô',
        });
      }

      const now = new Date();
      const embed = new EmbedBuilder()
        .setTitle('‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏')
        .setColor('#0099ff')
        .addFields(
          { name: 'üè† ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', value: server.serverName, inline: true },
          {
            name: 'üìÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            value: server.openBot ? 'üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : 'üî¥ ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            inline: true,
          },
        );

      if (server.openUntilAt) {
        const expiryDate = new Date(server.openUntilAt);
        const timeDiff = expiryDate.getTime() - now.getTime();
        const daysLeft = Math.ceil(timeDiff / (1000 * 3600 * 24));

        embed.addFields(
          { name: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', value: expiryDate.toLocaleDateString('th-TH'), inline: true },
          {
            name: '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            value: daysLeft > 0 ? `${daysLeft} ‡∏ß‡∏±‡∏ô` : '‚ùå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
            inline: true,
          },
        );

        if (daysLeft <= 0) {
          embed.setColor('#ff0000');
          embed.setDescription('‚ö†Ô∏è **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤');
        } else if (daysLeft <= 7) {
          embed.setColor('#ff9900');
          embed.setDescription('‚ö†Ô∏è **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏');
        } else {
          embed.setDescription('‚úÖ **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥**');
        }
      } else {
        embed.addFields(
          { name: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', value: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î', inline: true },
          { name: '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠', value: '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î', inline: true },
        );
        embed.setDescription('‚úÖ **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏**');
      }

      embed.setTimestamp();
      embed.setFooter({
        text: `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢ ${interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL(),
      });

      return interaction.editReply({ embeds: [embed] });
    } catch (error) {
      this.logger.error('Check expiry command error:', error);
      return interaction.editReply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      });
    }
  }

  @SlashCommand({
    name: 'notify-admin',
    description: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°',
  })
  public async onNotifyAdmin(@Context() [interaction]: SlashCommandContext) {
    try {
      const guild = interaction.guild;
      if (!guild) {
        return interaction.reply({
          content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ',
          ephemeral: true,
        });
      }

      const server = await this.serverRepository.getServerById(guild.id);
      if (!server) {
        return interaction.reply({
          content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô',
          ephemeral: true,
        });
      }

      const embed = new EmbedBuilder()
        .setTitle('üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')
        .setDescription(
          '**‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô:**\n\n' +
            'üîó **‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:** https://www.me-poong.com\n' +
            'üìß **‡∏≠‡∏µ‡πÄ‡∏°‡∏•:** admin@me-poong.com\n' +
            'üí¨ **Discord:** ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô DM ‡πÑ‡∏î‡πâ\n\n' +
            '**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤:**\n' +
            `üìç **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:** ${guild.name}\n` +
            `üÜî **Server ID:** ${guild.id}\n` +
            `üë§ **‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤:** ${interaction.user.username} (${interaction.user.id})`,
        )
        .setColor('#0099ff')
        .setTimestamp()
        .setFooter({
          text: 'ME-POONG Bot Support',
          iconURL: interaction.client.user?.displayAvatarURL(),
        });

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await interaction.reply({ embeds: [embed], ephemeral: true });

      // ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      try {
        const owner = await guild.fetchOwner();
        if (owner) {
          const ownerNotifyEmbed = new EmbedBuilder()
            .setTitle('üö® ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å')
            .setDescription(
              `**‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${interaction.user.username} ‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á notify-admin**\n\n` +
                `**‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:** ${guild.name}\n` +
                `**‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á:** ${interaction.user.tag} (${interaction.user.id})\n` +
                `**‡πÄ‡∏ß‡∏•‡∏≤:** ${new Date().toLocaleString('th-TH')}`,
            )
            .setColor('#ff9900')
            .setTimestamp();

          await owner.send({ embeds: [ownerNotifyEmbed] });
        }
      } catch (dmError) {
        this.logger.warn('Could not send DM to server owner:', dmError.message);
        // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á DM ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      }
    } catch (error) {
      this.logger.error('Notify admin command error:', error);
      return interaction.reply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        ephemeral: true,
      });
    }
  }

  private formatUptime(uptime: number): string {
    const days = Math.floor(uptime / (1000 * 60 * 60 * 24));
    const hours = Math.floor((uptime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((uptime % (1000 * 60)) / 1000);

    if (days > 0) return `${days}d ${hours}h ${minutes}m`;
    if (hours > 0) return `${hours}h ${minutes}m ${seconds}s`;
    if (minutes > 0) return `${minutes}m ${seconds}s`;
    return `${seconds}s`;
  }
}
